{"version":3,"sources":["abn_tree_directive.js"],"names":[],"mappings":"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","file":"abn_tree_directive-compiled.js","sourcesContent":["(function() {\r\n  var module;\r\n\r\n  module = angular.module('angularBootstrapNavTree', []);\r\n\r\n  module.directive('abnTree', [\r\n    '$timeout', function($timeout) {\r\n      return {\r\n        restrict: 'E',\r\n        template: \"<ul class=\\\"nav nav-list nav-pills nav-stacked abn-tree\\\">\\n  <li ng-repeat=\\\"row in tree_rows | filter:{visible:true} track by row.branch.uid\\\" ng-animate=\\\"'abn-tree-animate'\\\" ng-class=\\\"'level-' + {{ row.level }} + (row.branch.selected ? ' active':'')\\\" class=\\\"abn-tree-row\\\">\\n    <a ng-click=\\\"user_clicks_branch(row.branch)\\\">\\n      <i ng-class=\\\"row.tree_icon\\\" ng-click=\\\"row.branch.expanded = !row.branch.expanded\\\" class=\\\"indented tree-icon\\\"> </i>\\n      <span class=\\\"indented tree-label\\\">{{ row.label }} </span>\\n    </a>\\n  </li>\\n</ul>\",\r\n        replace: true,\r\n        scope: {\r\n          treeData: '=',\r\n          onSelect: '&',\r\n          initialSelection: '@',\r\n          treeControl: '='\r\n        },\r\n        link: function(scope, element, attrs) {\r\n          var error, expand_all_parents, expand_level, for_all_ancestors, for_each_branch, get_parent, n, on_treeData_change, select_branch, selected_branch, tree;\r\n          error = function(s) {\r\n            console.log('ERROR:' + s);\r\n            debugger;\r\n            return void 0;\r\n          };\r\n          if (attrs.iconExpand == null) {\r\n            attrs.iconExpand = 'icon-plus  glyphicon glyphicon-plus  fa fa-plus';\r\n          }\r\n          if (attrs.iconCollapse == null) {\r\n            attrs.iconCollapse = 'icon-minus glyphicon glyphicon-minus fa fa-minus';\r\n          }\r\n          if (attrs.iconLeaf == null) {\r\n            attrs.iconLeaf = 'icon-file  glyphicon glyphicon-file  fa fa-file';\r\n          }\r\n          if (attrs.expandLevel == null) {\r\n            attrs.expandLevel = '3';\r\n          }\r\n          expand_level = parseInt(attrs.expandLevel, 10);\r\n          if (!scope.treeData) {\r\n            alert('no treeData defined for the tree!');\r\n            return;\r\n          }\r\n          if (scope.treeData.length == null) {\r\n            if (treeData.label != null) {\r\n              scope.treeData = [treeData];\r\n            } else {\r\n              alert('treeData should be an array of root branches');\r\n              return;\r\n            }\r\n          }\r\n          for_each_branch = function(f) {\r\n            var do_f, root_branch, _i, _len, _ref, _results;\r\n            do_f = function(branch, level) {\r\n              var child, _i, _len, _ref, _results;\r\n              f(branch, level);\r\n              if (branch.children != null) {\r\n                _ref = branch.children;\r\n                _results = [];\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                  child = _ref[_i];\r\n                  _results.push(do_f(child, level + 1));\r\n                }\r\n                return _results;\r\n              }\r\n            };\r\n            _ref = scope.treeData;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n              root_branch = _ref[_i];\r\n              _results.push(do_f(root_branch, 1));\r\n            }\r\n            return _results;\r\n          };\r\n          selected_branch = null;\r\n          select_branch = function(branch) {\r\n            if (!branch) {\r\n              if (selected_branch != null) {\r\n                selected_branch.selected = false;\r\n              }\r\n              selected_branch = null;\r\n              return;\r\n            }\r\n            if (branch !== selected_branch) {\r\n              if (selected_branch != null) {\r\n                selected_branch.selected = false;\r\n              }\r\n              branch.selected = true;\r\n              selected_branch = branch;\r\n              expand_all_parents(branch);\r\n              if (branch.onSelect != null) {\r\n                return $timeout(function() {\r\n                  return branch.onSelect(branch);\r\n                });\r\n              } else {\r\n                if (scope.onSelect != null) {\r\n                  return $timeout(function() {\r\n                    return scope.onSelect({\r\n                      branch: branch\r\n                    });\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          };\r\n          scope.user_clicks_branch = function(branch) {\r\n            if (branch !== selected_branch) {\r\n              return select_branch(branch);\r\n            }\r\n          };\r\n          get_parent = function(child) {\r\n            var parent;\r\n            parent = void 0;\r\n            if (child.parent_uid) {\r\n              for_each_branch(function(b) {\r\n                if (b.uid === child.parent_uid) {\r\n                  return parent = b;\r\n                }\r\n              });\r\n            }\r\n            return parent;\r\n          };\r\n          for_all_ancestors = function(child, fn) {\r\n            var parent;\r\n            parent = get_parent(child);\r\n            if (parent != null) {\r\n              fn(parent);\r\n              return for_all_ancestors(parent, fn);\r\n            }\r\n          };\r\n          expand_all_parents = function(child) {\r\n            return for_all_ancestors(child, function(b) {\r\n              return b.expanded = true;\r\n            });\r\n          };\r\n          scope.tree_rows = [];\r\n          on_treeData_change = function() {\r\n            var add_branch_to_list, root_branch, _i, _len, _ref, _results;\r\n            for_each_branch(function(b, level) {\r\n              if (!b.uid) {\r\n                return b.uid = \"\" + Math.random();\r\n              }\r\n            });\r\n            console.log('UIDs are set.');\r\n            for_each_branch(function(b) {\r\n              var child, _i, _len, _ref, _results;\r\n              if (angular.isArray(b.children)) {\r\n                _ref = b.children;\r\n                _results = [];\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                  child = _ref[_i];\r\n                  _results.push(child.parent_uid = b.uid);\r\n                }\r\n                return _results;\r\n              }\r\n            });\r\n            scope.tree_rows = [];\r\n            for_each_branch(function(branch) {\r\n              var child, f;\r\n              if (branch.children) {\r\n                if (branch.children.length > 0) {\r\n                  f = function(e) {\r\n                    if (typeof e === 'string') {\r\n                      return {\r\n                        label: e,\r\n                        children: []\r\n                      };\r\n                    } else {\r\n                      return e;\r\n                    }\r\n                  };\r\n                  return branch.children = (function() {\r\n                    var _i, _len, _ref, _results;\r\n                    _ref = branch.children;\r\n                    _results = [];\r\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                      child = _ref[_i];\r\n                      _results.push(f(child));\r\n                    }\r\n                    return _results;\r\n                  })();\r\n                }\r\n              } else {\r\n                return branch.children = [];\r\n              }\r\n            });\r\n            add_branch_to_list = function(level, branch, visible) {\r\n              var child, child_visible, tree_icon, _i, _len, _ref, _results;\r\n              if (branch.expanded == null) {\r\n                branch.expanded = false;\r\n              }\r\n              if (!branch.children || branch.children.length === 0) {\r\n                tree_icon = attrs.iconLeaf;\r\n              } else {\r\n                if (branch.expanded) {\r\n                  tree_icon = attrs.iconCollapse;\r\n                } else {\r\n                  tree_icon = attrs.iconExpand;\r\n                }\r\n              }\r\n              scope.tree_rows.push({\r\n                level: level,\r\n                branch: branch,\r\n                label: branch.label,\r\n                tree_icon: tree_icon,\r\n                visible: visible\r\n              });\r\n              if (branch.children != null) {\r\n                _ref = branch.children;\r\n                _results = [];\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                  child = _ref[_i];\r\n                  child_visible = visible && branch.expanded;\r\n                  _results.push(add_branch_to_list(level + 1, child, child_visible));\r\n                }\r\n                return _results;\r\n              }\r\n            };\r\n            _ref = scope.treeData;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n              root_branch = _ref[_i];\r\n              _results.push(add_branch_to_list(1, root_branch, true));\r\n            }\r\n            return _results;\r\n          };\r\n          scope.$watch('treeData', on_treeData_change, true);\r\n          if (attrs.initialSelection != null) {\r\n            for_each_branch(function(b) {\r\n              if (b.label === attrs.initialSelection) {\r\n                return $timeout(function() {\r\n                  return select_branch(b);\r\n                });\r\n              }\r\n            });\r\n          }\r\n          n = scope.treeData.length;\r\n          console.log('num root branches = ' + n);\r\n          for_each_branch(function(b, level) {\r\n            b.level = level;\r\n            return b.expanded = b.level < expand_level;\r\n          });\r\n          if (scope.treeControl != null) {\r\n            if (angular.isObject(scope.treeControl)) {\r\n              tree = scope.treeControl;\r\n              tree.expand_all = function() {\r\n                return for_each_branch(function(b, level) {\r\n                  return b.expanded = true;\r\n                });\r\n              };\r\n              tree.collapse_all = function() {\r\n                return for_each_branch(function(b, level) {\r\n                  return b.expanded = false;\r\n                });\r\n              };\r\n              tree.get_first_branch = function() {\r\n                n = scope.treeData.length;\r\n                if (n > 0) {\r\n                  return scope.treeData[0];\r\n                }\r\n              };\r\n              tree.select_first_branch = function() {\r\n                var b;\r\n                b = tree.get_first_branch();\r\n                return tree.select_branch(b);\r\n              };\r\n              tree.get_selected_branch = function() {\r\n                return selected_branch;\r\n              };\r\n              tree.get_parent_branch = function(b) {\r\n                return get_parent(b);\r\n              };\r\n              tree.select_branch = function(b) {\r\n                select_branch(b);\r\n                return b;\r\n              };\r\n              tree.get_children = function(b) {\r\n                return b.children;\r\n              };\r\n              tree.select_parent_branch = function(b) {\r\n                var p;\r\n                if (b == null) {\r\n                  b = tree.get_selected_branch();\r\n                }\r\n                if (b != null) {\r\n                  p = tree.get_parent_branch(b);\r\n                  if (p != null) {\r\n                    tree.select_branch(p);\r\n                    return p;\r\n                  }\r\n                }\r\n              };\r\n              tree.add_branch = function(parent, new_branch) {\r\n                if (parent != null) {\r\n                  parent.children.push(new_branch);\r\n                  parent.expanded = true;\r\n                } else {\r\n                  scope.treeData.push(new_branch);\r\n                }\r\n                return new_branch;\r\n              };\r\n              tree.add_root_branch = function(new_branch) {\r\n                tree.add_branch(null, new_branch);\r\n                return new_branch;\r\n              };\r\n              tree.expand_branch = function(b) {\r\n                if (b == null) {\r\n                  b = tree.get_selected_branch();\r\n                }\r\n                if (b != null) {\r\n                  b.expanded = true;\r\n                  return b;\r\n                }\r\n              };\r\n              tree.collapse_branch = function(b) {\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  b.expanded = false;\r\n                  return b;\r\n                }\r\n              };\r\n              tree.get_siblings = function(b) {\r\n                var p, siblings;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  p = tree.get_parent_branch(b);\r\n                  if (p) {\r\n                    siblings = p.children;\r\n                  } else {\r\n                    siblings = scope.treeData;\r\n                  }\r\n                  return siblings;\r\n                }\r\n              };\r\n              tree.get_next_sibling = function(b) {\r\n                var i, siblings;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  siblings = tree.get_siblings(b);\r\n                  n = siblings.length;\r\n                  i = siblings.indexOf(b);\r\n                  if (i < n) {\r\n                    return siblings[i + 1];\r\n                  }\r\n                }\r\n              };\r\n              tree.get_prev_sibling = function(b) {\r\n                var i, siblings;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                siblings = tree.get_siblings(b);\r\n                n = siblings.length;\r\n                i = siblings.indexOf(b);\r\n                if (i > 0) {\r\n                  return siblings[i - 1];\r\n                }\r\n              };\r\n              tree.select_next_sibling = function(b) {\r\n                var next;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  next = tree.get_next_sibling(b);\r\n                  if (next != null) {\r\n                    return tree.select_branch(next);\r\n                  }\r\n                }\r\n              };\r\n              tree.select_prev_sibling = function(b) {\r\n                var prev;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  prev = tree.get_prev_sibling(b);\r\n                  if (prev != null) {\r\n                    return tree.select_branch(prev);\r\n                  }\r\n                }\r\n              };\r\n              tree.get_first_child = function(b) {\r\n                var _ref;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  if (((_ref = b.children) != null ? _ref.length : void 0) > 0) {\r\n                    return b.children[0];\r\n                  }\r\n                }\r\n              };\r\n              tree.get_closest_ancestor_next_sibling = function(b) {\r\n                var next, parent;\r\n                next = tree.get_next_sibling(b);\r\n                if (next != null) {\r\n                  return next;\r\n                } else {\r\n                  parent = tree.get_parent_branch(b);\r\n                  return tree.get_closest_ancestor_next_sibling(parent);\r\n                }\r\n              };\r\n              tree.get_next_branch = function(b) {\r\n                var next;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  next = tree.get_first_child(b);\r\n                  if (next != null) {\r\n                    return next;\r\n                  } else {\r\n                    next = tree.get_closest_ancestor_next_sibling(b);\r\n                    return next;\r\n                  }\r\n                }\r\n              };\r\n              tree.select_next_branch = function(b) {\r\n                var next;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  next = tree.get_next_branch(b);\r\n                  if (next != null) {\r\n                    tree.select_branch(next);\r\n                    return next;\r\n                  }\r\n                }\r\n              };\r\n              tree.last_descendant = function(b) {\r\n                var last_child;\r\n                if (b == null) {\r\n                  debugger;\r\n                }\r\n                n = b.children.length;\r\n                if (n === 0) {\r\n                  return b;\r\n                } else {\r\n                  last_child = b.children[n - 1];\r\n                  return tree.last_descendant(last_child);\r\n                }\r\n              };\r\n              tree.get_prev_branch = function(b) {\r\n                var parent, prev_sibling;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  prev_sibling = tree.get_prev_sibling(b);\r\n                  if (prev_sibling != null) {\r\n                    return tree.last_descendant(prev_sibling);\r\n                  } else {\r\n                    parent = tree.get_parent_branch(b);\r\n                    return parent;\r\n                  }\r\n                }\r\n              };\r\n              return tree.select_prev_branch = function(b) {\r\n                var prev;\r\n                if (b == null) {\r\n                  b = selected_branch;\r\n                }\r\n                if (b != null) {\r\n                  prev = tree.get_prev_branch(b);\r\n                  if (prev != null) {\r\n                    tree.select_branch(prev);\r\n                    return prev;\r\n                  }\r\n                }\r\n              };\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n  ]);\r\n\r\n}).call(this);\r\n"]}