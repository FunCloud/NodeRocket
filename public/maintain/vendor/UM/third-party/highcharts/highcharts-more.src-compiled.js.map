{"version":3,"sources":["highcharts-more.src.js"],"names":[],"mappings":"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","file":"highcharts-more.src-compiled.js","sourcesContent":["// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n\n/**\n * @license Highcharts JS v3.0.6 (2013-10-04)\n *\n * (c) 2009-2013 Torstein Hønsi\n *\n * License: www.highcharts.com/license\n */\n\n// JSLint options:\n/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */\n\n(function (Highcharts, UNDEFINED) {\nvar arrayMin = Highcharts.arrayMin,\n\tarrayMax = Highcharts.arrayMax,\n\teach = Highcharts.each,\n\textend = Highcharts.extend,\n\tmerge = Highcharts.merge,\n\tmap = Highcharts.map,\n\tpick = Highcharts.pick,\n\tpInt = Highcharts.pInt,\n\tdefaultPlotOptions = Highcharts.getOptions().plotOptions,\n\tseriesTypes = Highcharts.seriesTypes,\n\textendClass = Highcharts.extendClass,\n\tsplat = Highcharts.splat,\n\twrap = Highcharts.wrap,\n\tAxis = Highcharts.Axis,\n\tTick = Highcharts.Tick,\n\tSeries = Highcharts.Series,\n\tcolProto = seriesTypes.column.prototype,\n\tmath = Math,\n\tmathRound = math.round,\n\tmathFloor = math.floor,\n\tmathMax = math.max,\n\tnoop = function () {};/**\n * The Pane object allows options that are common to a set of X and Y axes.\n * \n * In the future, this can be extended to basic Highcharts and Highstock.\n */\nfunction Pane(options, chart, firstAxis) {\n\tthis.init.call(this, options, chart, firstAxis);\n}\n\n// Extend the Pane prototype\nextend(Pane.prototype, {\n\t\n\t/**\n\t * Initiate the Pane object\n\t */\n\tinit: function (options, chart, firstAxis) {\n\t\tvar pane = this,\n\t\t\tbackgroundOption,\n\t\t\tdefaultOptions = pane.defaultOptions;\n\t\t\n\t\tpane.chart = chart;\n\t\t\n\t\t// Set options\n\t\tif (chart.angular) { // gauges\n\t\t\tdefaultOptions.background = {}; // gets extended by this.defaultBackgroundOptions\n\t\t}\n\t\tpane.options = options = merge(defaultOptions, options);\n\t\t\n\t\tbackgroundOption = options.background;\n\t\t\n\t\t// To avoid having weighty logic to place, update and remove the backgrounds,\n\t\t// push them to the first axis' plot bands and borrow the existing logic there.\n\t\tif (backgroundOption) {\n\t\t\teach([].concat(splat(backgroundOption)).reverse(), function (config) {\n\t\t\t\tvar backgroundColor = config.backgroundColor; // if defined, replace the old one (specific for gradients)\n\t\t\t\tconfig = merge(pane.defaultBackgroundOptions, config);\n\t\t\t\tif (backgroundColor) {\n\t\t\t\t\tconfig.backgroundColor = backgroundColor;\n\t\t\t\t}\n\t\t\t\tconfig.color = config.backgroundColor; // due to naming in plotBands\n\t\t\t\tfirstAxis.options.plotBands.unshift(config);\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * The default options object\n\t */\n\tdefaultOptions: {\n\t\t// background: {conditional},\n\t\tcenter: ['50%', '50%'],\n\t\tsize: '85%',\n\t\tstartAngle: 0\n\t\t//endAngle: startAngle + 360\n\t},\t\n\t\n\t/**\n\t * The default background options\n\t */\n\tdefaultBackgroundOptions: {\n\t\tshape: 'circle',\n\t\tborderWidth: 1,\n\t\tborderColor: 'silver',\n\t\tbackgroundColor: {\n\t\t\tlinearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n\t\t\tstops: [\n\t\t\t\t[0, '#FFF'],\n\t\t\t\t[1, '#DDD']\n\t\t\t]\n\t\t},\n\t\tfrom: Number.MIN_VALUE, // corrected to axis min\n\t\tinnerRadius: 0,\n\t\tto: Number.MAX_VALUE, // corrected to axis max\n\t\touterRadius: '105%'\n\t}\n\t\n});\nvar axisProto = Axis.prototype,\n\ttickProto = Tick.prototype;\n\t\n/**\n * Augmented methods for the x axis in order to hide it completely, used for the X axis in gauges\n */\nvar hiddenAxisMixin = {\n\tgetOffset: noop,\n\tredraw: function () {\n\t\tthis.isDirty = false; // prevent setting Y axis dirty\n\t},\n\trender: function () {\n\t\tthis.isDirty = false; // prevent setting Y axis dirty\n\t},\n\tsetScale: noop,\n\tsetCategories: noop,\n\tsetTitle: noop\n};\n\n/**\n * Augmented methods for the value axis\n */\n/*jslint unparam: true*/\nvar radialAxisMixin = {\n\tisRadial: true,\n\t\n\t/**\n\t * The default options extend defaultYAxisOptions\n\t */\n\tdefaultRadialGaugeOptions: {\n\t\tlabels: {\n\t\t\talign: 'center',\n\t\t\tx: 0,\n\t\t\ty: null // auto\n\t\t},\n\t\tminorGridLineWidth: 0,\n\t\tminorTickInterval: 'auto',\n\t\tminorTickLength: 10,\n\t\tminorTickPosition: 'inside',\n\t\tminorTickWidth: 1,\n\t\tplotBands: [],\n\t\ttickLength: 10,\n\t\ttickPosition: 'inside',\n\t\ttickWidth: 2,\n\t\ttitle: {\n\t\t\trotation: 0\n\t\t},\n\t\tzIndex: 2 // behind dials, points in the series group\n\t},\n\t\n\t// Circular axis around the perimeter of a polar chart\n\tdefaultRadialXOptions: {\n\t\tgridLineWidth: 1, // spokes\n\t\tlabels: {\n\t\t\talign: null, // auto\n\t\t\tdistance: 15,\n\t\t\tx: 0,\n\t\t\ty: null // auto\n\t\t},\n\t\tmaxPadding: 0,\n\t\tminPadding: 0,\n\t\tplotBands: [],\n\t\tshowLastLabel: false, \n\t\ttickLength: 0\n\t},\n\t\n\t// Radial axis, like a spoke in a polar chart\n\tdefaultRadialYOptions: {\n\t\tgridLineInterpolation: 'circle',\n\t\tlabels: {\n\t\t\talign: 'right',\n\t\t\tx: -3,\n\t\t\ty: -2\n\t\t},\n\t\tplotBands: [],\n\t\tshowLastLabel: false,\n\t\ttitle: {\n\t\t\tx: 4,\n\t\t\ttext: null,\n\t\t\trotation: 90\n\t\t}\n\t},\n\t\n\t/**\n\t * Merge and set options\n\t */\n\tsetOptions: function (userOptions) {\n\t\t\n\t\tthis.options = merge(\n\t\t\tthis.defaultOptions,\n\t\t\tthis.defaultRadialOptions,\n\t\t\tuserOptions\n\t\t);\n\t\t\n\t},\n\t\n\t/**\n\t * Wrap the getOffset method to return zero offset for title or labels in a radial \n\t * axis\n\t */\n\tgetOffset: function () {\n\t\t// Call the Axis prototype method (the method we're in now is on the instance)\n\t\taxisProto.getOffset.call(this);\n\t\t\n\t\t// Title or label offsets are not counted\n\t\tthis.chart.axisOffset[this.side] = 0;\n\t},\n\n\n\t/**\n\t * Get the path for the axis line. This method is also referenced in the getPlotLinePath\n\t * method.\n\t */\n\tgetLinePath: function (lineWidth, radius) {\n\t\tvar center = this.center;\n\t\tradius = pick(radius, center[2] / 2 - this.offset);\n\t\t\n\t\treturn this.chart.renderer.symbols.arc(\n\t\t\tthis.left + center[0],\n\t\t\tthis.top + center[1],\n\t\t\tradius,\n\t\t\tradius, \n\t\t\t{\n\t\t\t\tstart: this.startAngleRad,\n\t\t\t\tend: this.endAngleRad,\n\t\t\t\topen: true,\n\t\t\t\tinnerR: 0\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Override setAxisTranslation by setting the translation to the difference\n\t * in rotation. This allows the translate method to return angle for \n\t * any given value.\n\t */\n\tsetAxisTranslation: function () {\n\t\t\n\t\t// Call uber method\t\t\n\t\taxisProto.setAxisTranslation.call(this);\n\t\t\t\n\t\t// Set transA and minPixelPadding\n\t\tif (this.center) { // it's not defined the first time\n\t\t\tif (this.isCircular) {\n\t\t\t\t\n\t\t\t\tthis.transA = (this.endAngleRad - this.startAngleRad) / \n\t\t\t\t\t((this.max - this.min) || 1);\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t} else { \n\t\t\t\tthis.transA = (this.center[2] / 2) / ((this.max - this.min) || 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isXAxis) {\n\t\t\t\tthis.minPixelPadding = this.transA * this.minPointOffset +\n\t\t\t\t\t(this.reversed ? (this.endAngleRad - this.startAngleRad) / 4 : 0); // ???\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * In case of auto connect, add one closestPointRange to the max value right before\n\t * tickPositions are computed, so that ticks will extend passed the real max.\n\t */\n\tbeforeSetTickPositions: function () {\n\t\tif (this.autoConnect) {\n\t\t\tthis.max += (this.categories && 1) || this.pointRange || this.closestPointRange || 0; // #1197, #2260\n\t\t}\n\t},\n\t\n\t/**\n\t * Override the setAxisSize method to use the arc's circumference as length. This\n\t * allows tickPixelInterval to apply to pixel lengths along the perimeter\n\t */\n\tsetAxisSize: function () {\n\t\t\n\t\taxisProto.setAxisSize.call(this);\n\n\t\tif (this.isRadial) {\n\n\t\t\t// Set the center array\n\t\t\tthis.center = this.pane.center = seriesTypes.pie.prototype.getCenter.call(this.pane);\n\t\t\t\n\t\t\tthis.len = this.width = this.height = this.isCircular ?\n\t\t\t\tthis.center[2] * (this.endAngleRad - this.startAngleRad) / 2 :\n\t\t\t\tthis.center[2] / 2;\n\t\t}\n\t},\n\t\n\t/**\n\t * Returns the x, y coordinate of a point given by a value and a pixel distance\n\t * from center\n\t */\n\tgetPosition: function (value, length) {\n\t\tif (!this.isCircular) {\n\t\t\tlength = this.translate(value);\n\t\t\tvalue = this.min;\t\n\t\t}\n\t\t\n\t\treturn this.postTranslate(\n\t\t\tthis.translate(value),\n\t\t\tpick(length, this.center[2] / 2) - this.offset\n\t\t);\t\t\n\t},\n\t\n\t/**\n\t * Translate from intermediate plotX (angle), plotY (axis.len - radius) to final chart coordinates. \n\t */\n\tpostTranslate: function (angle, radius) {\n\t\t\n\t\tvar chart = this.chart,\n\t\t\tcenter = this.center;\n\t\t\t\n\t\tangle = this.startAngleRad + angle;\n\t\t\n\t\treturn {\n\t\t\tx: chart.plotLeft + center[0] + Math.cos(angle) * radius,\n\t\t\ty: chart.plotTop + center[1] + Math.sin(angle) * radius\n\t\t}; \n\t\t\n\t},\n\t\n\t/**\n\t * Find the path for plot bands along the radial axis\n\t */\n\tgetPlotBandPath: function (from, to, options) {\n\t\tvar center = this.center,\n\t\t\tstartAngleRad = this.startAngleRad,\n\t\t\tfullRadius = center[2] / 2,\n\t\t\tradii = [\n\t\t\t\tpick(options.outerRadius, '100%'),\n\t\t\t\toptions.innerRadius,\n\t\t\t\tpick(options.thickness, 10)\n\t\t\t],\n\t\t\tpercentRegex = /%$/,\n\t\t\tstart,\n\t\t\tend,\n\t\t\topen,\n\t\t\tisCircular = this.isCircular, // X axis in a polar chart\n\t\t\tret;\n\t\t\t\n\t\t// Polygonal plot bands\n\t\tif (this.options.gridLineInterpolation === 'polygon') {\n\t\t\tret = this.getPlotLinePath(from).concat(this.getPlotLinePath(to, true));\n\t\t\n\t\t// Circular grid bands\n\t\t} else {\n\t\t\t\n\t\t\t// Plot bands on Y axis (radial axis) - inner and outer radius depend on to and from\n\t\t\tif (!isCircular) {\n\t\t\t\tradii[0] = this.translate(from);\n\t\t\t\tradii[1] = this.translate(to);\n\t\t\t}\n\t\t\t\n\t\t\t// Convert percentages to pixel values\n\t\t\tradii = map(radii, function (radius) {\n\t\t\t\tif (percentRegex.test(radius)) {\n\t\t\t\t\tradius = (pInt(radius, 10) * fullRadius) / 100;\n\t\t\t\t}\n\t\t\t\treturn radius;\n\t\t\t});\n\t\t\t\n\t\t\t// Handle full circle\n\t\t\tif (options.shape === 'circle' || !isCircular) {\n\t\t\t\tstart = -Math.PI / 2;\n\t\t\t\tend = Math.PI * 1.5;\n\t\t\t\topen = true;\n\t\t\t} else {\n\t\t\t\tstart = startAngleRad + this.translate(from);\n\t\t\t\tend = startAngleRad + this.translate(to);\n\t\t\t}\n\t\t\n\t\t\n\t\t\tret = this.chart.renderer.symbols.arc(\n\t\t\t\tthis.left + center[0],\n\t\t\t\tthis.top + center[1],\n\t\t\t\tradii[0],\n\t\t\t\tradii[0],\n\t\t\t\t{\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: end,\n\t\t\t\t\tinnerR: pick(radii[1], radii[0] - radii[2]),\n\t\t\t\t\topen: open\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t \n\t\treturn ret;\n\t},\n\t\n\t/**\n\t * Find the path for plot lines perpendicular to the radial axis.\n\t */\n\tgetPlotLinePath: function (value, reverse) {\n\t\tvar axis = this,\n\t\t\tcenter = axis.center,\n\t\t\tchart = axis.chart,\n\t\t\tend = axis.getPosition(value),\n\t\t\txAxis,\n\t\t\txy,\n\t\t\ttickPositions,\n\t\t\tret;\n\t\t\n\t\t// Spokes\n\t\tif (axis.isCircular) {\n\t\t\tret = ['M', center[0] + chart.plotLeft, center[1] + chart.plotTop, 'L', end.x, end.y];\n\t\t\n\t\t// Concentric circles\t\t\t\n\t\t} else if (axis.options.gridLineInterpolation === 'circle') {\n\t\t\tvalue = axis.translate(value);\n\t\t\tif (value) { // a value of 0 is in the center\n\t\t\t\tret = axis.getLinePath(0, value);\n\t\t\t}\n\t\t// Concentric polygons \n\t\t} else {\n\t\t\txAxis = chart.xAxis[0];\n\t\t\tret = [];\n\t\t\tvalue = axis.translate(value);\n\t\t\ttickPositions = xAxis.tickPositions;\n\t\t\tif (xAxis.autoConnect) {\n\t\t\t\ttickPositions = tickPositions.concat([tickPositions[0]]);\n\t\t\t}\n\t\t\t// Reverse the positions for concatenation of polygonal plot bands\n\t\t\tif (reverse) {\n\t\t\t\ttickPositions = [].concat(tickPositions).reverse();\n\t\t\t}\n\t\t\t\t\n\t\t\teach(tickPositions, function (pos, i) {\n\t\t\t\txy = xAxis.getPosition(pos, value);\n\t\t\t\tret.push(i ? 'L' : 'M', xy.x, xy.y);\n\t\t\t});\n\t\t\t\n\t\t}\n\t\treturn ret;\n\t},\n\t\n\t/**\n\t * Find the position for the axis title, by default inside the gauge\n\t */\n\tgetTitlePosition: function () {\n\t\tvar center = this.center,\n\t\t\tchart = this.chart,\n\t\t\ttitleOptions = this.options.title;\n\t\t\n\t\treturn { \n\t\t\tx: chart.plotLeft + center[0] + (titleOptions.x || 0), \n\t\t\ty: chart.plotTop + center[1] - ({ high: 0.5, middle: 0.25, low: 0 }[titleOptions.align] * \n\t\t\t\tcenter[2]) + (titleOptions.y || 0)  \n\t\t};\n\t}\n\t\n};\n/*jslint unparam: false*/\n\n/**\n * Override axisProto.init to mix in special axis instance functions and function overrides\n */\nwrap(axisProto, 'init', function (proceed, chart, userOptions) {\n\tvar axis = this,\n\t\tangular = chart.angular,\n\t\tpolar = chart.polar,\n\t\tisX = userOptions.isX,\n\t\tisHidden = angular && isX,\n\t\tisCircular,\n\t\tstartAngleRad,\n\t\tendAngleRad,\n\t\toptions,\n\t\tchartOptions = chart.options,\n\t\tpaneIndex = userOptions.pane || 0,\n\t\tpane,\n\t\tpaneOptions;\n\t\t\n\t// Before prototype.init\n\tif (angular) {\n\t\textend(this, isHidden ? hiddenAxisMixin : radialAxisMixin);\n\t\tisCircular =  !isX;\n\t\tif (isCircular) {\n\t\t\tthis.defaultRadialOptions = this.defaultRadialGaugeOptions;\n\t\t}\n\t\t\n\t} else if (polar) {\n\t\t//extend(this, userOptions.isX ? radialAxisMixin : radialAxisMixin);\n\t\textend(this, radialAxisMixin);\n\t\tisCircular = isX;\n\t\tthis.defaultRadialOptions = isX ? this.defaultRadialXOptions : merge(this.defaultYAxisOptions, this.defaultRadialYOptions);\n\t\t\n\t}\n\t\n\t// Run prototype.init\n\tproceed.call(this, chart, userOptions);\n\t\n\tif (!isHidden && (angular || polar)) {\n\t\toptions = this.options;\n\t\t\n\t\t// Create the pane and set the pane options.\n\t\tif (!chart.panes) {\n\t\t\tchart.panes = [];\n\t\t}\n\t\tthis.pane = pane = chart.panes[paneIndex] = chart.panes[paneIndex] || new Pane(\n\t\t\tsplat(chartOptions.pane)[paneIndex],\n\t\t\tchart,\n\t\t\taxis\n\t\t);\n\t\tpaneOptions = pane.options;\n\t\t\n\t\t\t\n\t\t// Disable certain features on angular and polar axes\n\t\tchart.inverted = false;\n\t\tchartOptions.chart.zoomType = null;\n\t\t\n\t\t// Start and end angle options are\n\t\t// given in degrees relative to top, while internal computations are\n\t\t// in radians relative to right (like SVG).\n\t\tthis.startAngleRad = startAngleRad = (paneOptions.startAngle - 90) * Math.PI / 180;\n\t\tthis.endAngleRad = endAngleRad = (pick(paneOptions.endAngle, paneOptions.startAngle + 360)  - 90) * Math.PI / 180;\n\t\tthis.offset = options.offset || 0;\n\t\t\n\t\tthis.isCircular = isCircular;\n\t\t\n\t\t// Automatically connect grid lines?\n\t\tif (isCircular && userOptions.max === UNDEFINED && endAngleRad - startAngleRad === 2 * Math.PI) {\n\t\t\tthis.autoConnect = true;\n\t\t}\n\t}\n\t\n});\n\n/**\n * Add special cases within the Tick class' methods for radial axes.\n */\t\nwrap(tickProto, 'getPosition', function (proceed, horiz, pos, tickmarkOffset, old) {\n\tvar axis = this.axis;\n\t\n\treturn axis.getPosition ? \n\t\taxis.getPosition(pos) :\n\t\tproceed.call(this, horiz, pos, tickmarkOffset, old);\t\n});\n\n/**\n * Wrap the getLabelPosition function to find the center position of the label\n * based on the distance option\n */\t\nwrap(tickProto, 'getLabelPosition', function (proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n\tvar axis = this.axis,\n\t\toptionsY = labelOptions.y,\n\t\tret,\n\t\talign = labelOptions.align,\n\t\tangle = ((axis.translate(this.pos) + axis.startAngleRad + Math.PI / 2) / Math.PI * 180) % 360;\n\t\n\tif (axis.isRadial) {\n\t\tret = axis.getPosition(this.pos, (axis.center[2] / 2) + pick(labelOptions.distance, -25));\n\t\t\n\t\t// Automatically rotated\n\t\tif (labelOptions.rotation === 'auto') {\n\t\t\tlabel.attr({ \n\t\t\t\trotation: angle\n\t\t\t});\n\t\t\n\t\t// Vertically centered\n\t\t} else if (optionsY === null) {\n\t\t\toptionsY = pInt(label.styles.lineHeight) * 0.9 - label.getBBox().height / 2;\n\t\t\n\t\t}\n\t\t\n\t\t// Automatic alignment\n\t\tif (align === null) {\n\t\t\tif (axis.isCircular) {\n\t\t\t\tif (angle > 20 && angle < 160) {\n\t\t\t\t\talign = 'left'; // right hemisphere\n\t\t\t\t} else if (angle > 200 && angle < 340) {\n\t\t\t\t\talign = 'right'; // left hemisphere\n\t\t\t\t} else {\n\t\t\t\t\talign = 'center'; // top or bottom\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talign = 'center';\n\t\t\t}\n\t\t\tlabel.attr({\n\t\t\t\talign: align\n\t\t\t});\n\t\t}\n\t\t\n\t\tret.x += labelOptions.x;\n\t\tret.y += optionsY;\n\t\t\n\t} else {\n\t\tret = proceed.call(this, x, y, label, horiz, labelOptions, tickmarkOffset, index, step);\n\t}\n\treturn ret;\n});\n\n/**\n * Wrap the getMarkPath function to return the path of the radial marker\n */\nwrap(tickProto, 'getMarkPath', function (proceed, x, y, tickLength, tickWidth, horiz, renderer) {\n\tvar axis = this.axis,\n\t\tendPoint,\n\t\tret;\n\t\t\n\tif (axis.isRadial) {\n\t\tendPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);\n\t\tret = [\n\t\t\t'M',\n\t\t\tx,\n\t\t\ty,\n\t\t\t'L',\n\t\t\tendPoint.x,\n\t\t\tendPoint.y\n\t\t];\n\t} else {\n\t\tret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);\n\t}\n\treturn ret;\n});/* \n * The AreaRangeSeries class\n * \n */\n\n/**\n * Extend the default options with map options\n */\ndefaultPlotOptions.arearange = merge(defaultPlotOptions.area, {\n\tlineWidth: 1,\n\tmarker: null,\n\tthreshold: null,\n\ttooltip: {\n\t\tpointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>' \n\t},\n\ttrackByArea: true,\n\tdataLabels: {\n\t\tverticalAlign: null,\n\t\txLow: 0,\n\t\txHigh: 0,\n\t\tyLow: 0,\n\t\tyHigh: 0\t\n\t}\n});\n\n/**\n * Add the series type\n */\nseriesTypes.arearange = Highcharts.extendClass(seriesTypes.area, {\n\ttype: 'arearange',\n\tpointArrayMap: ['low', 'high'],\n\ttoYData: function (point) {\n\t\treturn [point.low, point.high];\n\t},\n\tpointValKey: 'low',\n\t\n\t/**\n\t * Extend getSegments to force null points if the higher value is null. #1703.\n\t */\n\tgetSegments: function () {\n\t\tvar series = this;\n\n\t\teach(series.points, function (point) {\n\t\t\tif (!series.options.connectNulls && (point.low === null || point.high === null)) {\n\t\t\t\tpoint.y = null;\n\t\t\t} else if (point.low === null && point.high !== null) {\n\t\t\t\tpoint.y = point.high;\n\t\t\t}\n\t\t});\n\t\tSeries.prototype.getSegments.call(this);\n\t},\n\t\n\t/**\n\t * Translate data points from raw values x and y to plotX and plotY\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis;\n\n\t\tseriesTypes.area.prototype.translate.apply(series);\n\n\t\t// Set plotLow and plotHigh\n\t\teach(series.points, function (point) {\n\n\t\t\tvar low = point.low,\n\t\t\t\thigh = point.high,\n\t\t\t\tplotY = point.plotY;\n\n\t\t\tif (high === null && low === null) {\n\t\t\t\tpoint.y = null;\n\t\t\t} else if (low === null) {\n\t\t\t\tpoint.plotLow = point.plotY = null;\n\t\t\t\tpoint.plotHigh = yAxis.translate(high, 0, 1, 0, 1);\n\t\t\t} else if (high === null) {\n\t\t\t\tpoint.plotLow = plotY;\n\t\t\t\tpoint.plotHigh = null;\n\t\t\t} else {\n\t\t\t\tpoint.plotLow = plotY;\n\t\t\t\tpoint.plotHigh = yAxis.translate(high, 0, 1, 0, 1);\n\t\t\t}\n\t\t});\n\t},\n\t\n\t/**\n\t * Extend the line series' getSegmentPath method by applying the segment\n\t * path to both lower and higher values of the range\n\t */\n\tgetSegmentPath: function (segment) {\n\t\t\n\t\tvar lowSegment,\n\t\t\thighSegment = [],\n\t\t\ti = segment.length,\n\t\t\tbaseGetSegmentPath = Series.prototype.getSegmentPath,\n\t\t\tpoint,\n\t\t\tlinePath,\n\t\t\tlowerPath,\n\t\t\toptions = this.options,\n\t\t\tstep = options.step,\n\t\t\thigherPath;\n\t\t\t\n\t\t// Remove nulls from low segment\n\t\tlowSegment = HighchartsAdapter.grep(segment, function (point) {\n\t\t\treturn point.plotLow !== null;\n\t\t});\n\t\t\n\t\t// Make a segment with plotX and plotY for the top values\n\t\twhile (i--) {\n\t\t\tpoint = segment[i];\n\t\t\tif (point.plotHigh !== null) {\n\t\t\t\thighSegment.push({\n\t\t\t\t\tplotX: point.plotX,\n\t\t\t\t\tplotY: point.plotHigh\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Get the paths\n\t\tlowerPath = baseGetSegmentPath.call(this, lowSegment);\n\t\tif (step) {\n\t\t\tif (step === true) {\n\t\t\t\tstep = 'left';\n\t\t\t}\n\t\t\toptions.step = { left: 'right', center: 'center', right: 'left' }[step]; // swap for reading in getSegmentPath\n\t\t}\n\t\thigherPath = baseGetSegmentPath.call(this, highSegment);\n\t\toptions.step = step;\n\t\t\n\t\t// Create a line on both top and bottom of the range\n\t\tlinePath = [].concat(lowerPath, higherPath);\n\t\t\n\t\t// For the area path, we need to change the 'move' statement into 'lineTo' or 'curveTo'\n\t\thigherPath[0] = 'L'; // this probably doesn't work for spline\t\t\t\n\t\tthis.areaPath = this.areaPath.concat(lowerPath, higherPath);\n\t\t\n\t\treturn linePath;\n\t},\n\t\n\t/**\n\t * Extend the basic drawDataLabels method by running it for both lower and higher\n\t * values.\n\t */\n\tdrawDataLabels: function () {\n\t\t\n\t\tvar data = this.data,\n\t\t\tlength = data.length,\n\t\t\ti,\n\t\t\toriginalDataLabels = [],\n\t\t\tseriesProto = Series.prototype,\n\t\t\tdataLabelOptions = this.options.dataLabels,\n\t\t\tpoint,\n\t\t\tinverted = this.chart.inverted;\n\t\t\t\n\t\tif (dataLabelOptions.enabled || this._hasPointLabels) {\n\t\t\t\n\t\t\t// Step 1: set preliminary values for plotY and dataLabel and draw the upper labels\n\t\t\ti = length;\n\t\t\twhile (i--) {\n\t\t\t\tpoint = data[i];\n\t\t\t\t\n\t\t\t\t// Set preliminary values\n\t\t\t\tpoint.y = point.high;\n\t\t\t\tpoint.plotY = point.plotHigh;\n\t\t\t\t\n\t\t\t\t// Store original data labels and set preliminary label objects to be picked up \n\t\t\t\t// in the uber method\n\t\t\t\toriginalDataLabels[i] = point.dataLabel;\n\t\t\t\tpoint.dataLabel = point.dataLabelUpper;\n\t\t\t\t\n\t\t\t\t// Set the default offset\n\t\t\t\tpoint.below = false;\n\t\t\t\tif (inverted) {\n\t\t\t\t\tdataLabelOptions.align = 'left';\n\t\t\t\t\tdataLabelOptions.x = dataLabelOptions.xHigh;\t\t\t\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tdataLabelOptions.y = dataLabelOptions.yHigh;\n\t\t\t\t}\n\t\t\t}\n\t\t\tseriesProto.drawDataLabels.apply(this, arguments); // #1209\n\t\t\t\n\t\t\t// Step 2: reorganize and handle data labels for the lower values\n\t\t\ti = length;\n\t\t\twhile (i--) {\n\t\t\t\tpoint = data[i];\n\t\t\t\t\n\t\t\t\t// Move the generated labels from step 1, and reassign the original data labels\n\t\t\t\tpoint.dataLabelUpper = point.dataLabel;\n\t\t\t\tpoint.dataLabel = originalDataLabels[i];\n\t\t\t\t\n\t\t\t\t// Reset values\n\t\t\t\tpoint.y = point.low;\n\t\t\t\tpoint.plotY = point.plotLow;\n\t\t\t\t\n\t\t\t\t// Set the default offset\n\t\t\t\tpoint.below = true;\n\t\t\t\tif (inverted) {\n\t\t\t\t\tdataLabelOptions.align = 'right';\n\t\t\t\t\tdataLabelOptions.x = dataLabelOptions.xLow;\n\t\t\t\t} else {\n\t\t\t\t\tdataLabelOptions.y = dataLabelOptions.yLow;\n\t\t\t\t}\n\t\t\t}\n\t\t\tseriesProto.drawDataLabels.apply(this, arguments);\n\t\t}\n\t\n\t},\n\t\n\talignDataLabel: seriesTypes.column.prototype.alignDataLabel,\n\t\n\tgetSymbol: seriesTypes.column.prototype.getSymbol,\n\t\n\tdrawPoints: noop\n});/**\n * The AreaSplineRangeSeries class\n */\n\ndefaultPlotOptions.areasplinerange = merge(defaultPlotOptions.arearange);\n\n/**\n * AreaSplineRangeSeries object\n */\nseriesTypes.areasplinerange = extendClass(seriesTypes.arearange, {\n\ttype: 'areasplinerange',\n\tgetPointSpline: seriesTypes.spline.prototype.getPointSpline\n});/**\n * The ColumnRangeSeries class\n */\ndefaultPlotOptions.columnrange = merge(defaultPlotOptions.column, defaultPlotOptions.arearange, {\n\tlineWidth: 1,\n\tpointRange: null\n});\n\n/**\n * ColumnRangeSeries object\n */\nseriesTypes.columnrange = extendClass(seriesTypes.arearange, {\n\ttype: 'columnrange',\n\t/**\n\t * Translate data points from raw values x and y to plotX and plotY\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis,\n\t\t\tplotHigh;\n\n\t\tcolProto.translate.apply(series);\n\n\t\t// Set plotLow and plotHigh\n\t\teach(series.points, function (point) {\n\t\t\tvar shapeArgs = point.shapeArgs,\n\t\t\t\tminPointLength = series.options.minPointLength,\n\t\t\t\theightDifference,\n\t\t\t\theight,\n\t\t\t\ty;\n\n\t\t\tpoint.plotHigh = plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);\n\t\t\tpoint.plotLow = point.plotY;\n\n\t\t\t// adjust shape\n\t\t\ty = plotHigh;\n\t\t\theight = point.plotY - plotHigh;\n\n\t\t\tif (height < minPointLength) {\n\t\t\t\theightDifference = (minPointLength - height);\n\t\t\t\theight += heightDifference;\n\t\t\t\ty -= heightDifference / 2;\n\t\t\t}\n\t\t\tshapeArgs.height = height;\n\t\t\tshapeArgs.y = y;\n\t\t});\n\t},\n\ttrackerGroups: ['group', 'dataLabels'],\n\tdrawGraph: noop,\n\tpointAttrToOptions: colProto.pointAttrToOptions,\n\tdrawPoints: colProto.drawPoints,\n\tdrawTracker: colProto.drawTracker,\n\tanimate: colProto.animate,\n\tgetColumnMetrics: colProto.getColumnMetrics\n});\n/* \n * The GaugeSeries class\n */\n\n\n\n/**\n * Extend the default options\n */\ndefaultPlotOptions.gauge = merge(defaultPlotOptions.line, {\n\tdataLabels: {\n\t\tenabled: true,\n\t\ty: 15,\n\t\tborderWidth: 1,\n\t\tborderColor: 'silver',\n\t\tborderRadius: 3,\n\t\tstyle: {\n\t\t\tfontWeight: 'bold'\n\t\t},\n\t\tverticalAlign: 'top',\n\t\tzIndex: 2\n\t},\n\tdial: {\n\t\t// radius: '80%',\n\t\t// backgroundColor: 'black',\n\t\t// borderColor: 'silver',\n\t\t// borderWidth: 0,\n\t\t// baseWidth: 3,\n\t\t// topWidth: 1,\n\t\t// baseLength: '70%' // of radius\n\t\t// rearLength: '10%'\n\t},\n\tpivot: {\n\t\t//radius: 5,\n\t\t//borderWidth: 0\n\t\t//borderColor: 'silver',\n\t\t//backgroundColor: 'black'\n\t},\n\ttooltip: {\n\t\theaderFormat: ''\n\t},\n\tshowInLegend: false\n});\n\n/**\n * Extend the point object\n */\nvar GaugePoint = Highcharts.extendClass(Highcharts.Point, {\n\t/**\n\t * Don't do any hover colors or anything\n\t */\n\tsetState: function (state) {\n\t\tthis.state = state;\n\t}\n});\n\n\n/**\n * Add the series type\n */\nvar GaugeSeries = {\n\ttype: 'gauge',\n\tpointClass: GaugePoint,\n\t\n\t// chart.angular will be set to true when a gauge series is present, and this will\n\t// be used on the axes\n\tangular: true, \n\tdrawGraph: noop,\n\tfixedBox: true,\n\ttrackerGroups: ['group', 'dataLabels'],\n\t\n\t/**\n\t * Calculate paths etc\n\t */\n\ttranslate: function () {\n\t\t\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis,\n\t\t\toptions = series.options,\n\t\t\tcenter = yAxis.center;\n\t\t\t\n\t\tseries.generatePoints();\n\t\t\n\t\teach(series.points, function (point) {\n\t\t\t\n\t\t\tvar dialOptions = merge(options.dial, point.dial),\n\t\t\t\tradius = (pInt(pick(dialOptions.radius, 80)) * center[2]) / 200,\n\t\t\t\tbaseLength = (pInt(pick(dialOptions.baseLength, 70)) * radius) / 100,\n\t\t\t\trearLength = (pInt(pick(dialOptions.rearLength, 10)) * radius) / 100,\n\t\t\t\tbaseWidth = dialOptions.baseWidth || 3,\n\t\t\t\ttopWidth = dialOptions.topWidth || 1,\n\t\t\t\trotation = yAxis.startAngleRad + yAxis.translate(point.y, null, null, null, true);\n\n\t\t\t// Handle the wrap option\n\t\t\tif (options.wrap === false) {\n\t\t\t\trotation = Math.max(yAxis.startAngleRad, Math.min(yAxis.endAngleRad, rotation));\n\t\t\t}\n\t\t\trotation = rotation * 180 / Math.PI;\n\t\t\t\t\n\t\t\tpoint.shapeType = 'path';\n\t\t\tpoint.shapeArgs = {\n\t\t\t\td: dialOptions.path || [\n\t\t\t\t\t'M', \n\t\t\t\t\t-rearLength, -baseWidth / 2, \n\t\t\t\t\t'L', \n\t\t\t\t\tbaseLength, -baseWidth / 2,\n\t\t\t\t\tradius, -topWidth / 2,\n\t\t\t\t\tradius, topWidth / 2,\n\t\t\t\t\tbaseLength, baseWidth / 2,\n\t\t\t\t\t-rearLength, baseWidth / 2,\n\t\t\t\t\t'z'\n\t\t\t\t],\n\t\t\t\ttranslateX: center[0],\n\t\t\t\ttranslateY: center[1],\n\t\t\t\trotation: rotation\n\t\t\t};\n\t\t\t\n\t\t\t// Positions for data label\n\t\t\tpoint.plotX = center[0];\n\t\t\tpoint.plotY = center[1];\n\t\t});\n\t},\n\t\n\t/**\n\t * Draw the points where each point is one needle\n\t */\n\tdrawPoints: function () {\n\t\t\n\t\tvar series = this,\n\t\t\tcenter = series.yAxis.center,\n\t\t\tpivot = series.pivot,\n\t\t\toptions = series.options,\n\t\t\tpivotOptions = options.pivot,\n\t\t\trenderer = series.chart.renderer;\n\t\t\n\t\teach(series.points, function (point) {\n\t\t\t\n\t\t\tvar graphic = point.graphic,\n\t\t\t\tshapeArgs = point.shapeArgs,\n\t\t\t\td = shapeArgs.d,\n\t\t\t\tdialOptions = merge(options.dial, point.dial); // #1233\n\t\t\t\n\t\t\tif (graphic) {\n\t\t\t\tgraphic.animate(shapeArgs);\n\t\t\t\tshapeArgs.d = d; // animate alters it\n\t\t\t} else {\n\t\t\t\tpoint.graphic = renderer[point.shapeType](shapeArgs)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tstroke: dialOptions.borderColor || 'none',\n\t\t\t\t\t\t'stroke-width': dialOptions.borderWidth || 0,\n\t\t\t\t\t\tfill: dialOptions.backgroundColor || 'black',\n\t\t\t\t\t\trotation: shapeArgs.rotation // required by VML when animation is false\n\t\t\t\t\t})\n\t\t\t\t\t.add(series.group);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Add or move the pivot\n\t\tif (pivot) {\n\t\t\tpivot.animate({ // #1235\n\t\t\t\ttranslateX: center[0],\n\t\t\t\ttranslateY: center[1]\n\t\t\t});\n\t\t} else {\n\t\t\tseries.pivot = renderer.circle(0, 0, pick(pivotOptions.radius, 5))\n\t\t\t\t.attr({\n\t\t\t\t\t'stroke-width': pivotOptions.borderWidth || 0,\n\t\t\t\t\tstroke: pivotOptions.borderColor || 'silver',\n\t\t\t\t\tfill: pivotOptions.backgroundColor || 'black'\n\t\t\t\t})\n\t\t\t\t.translate(center[0], center[1])\n\t\t\t\t.add(series.group);\n\t\t}\n\t},\n\t\n\t/**\n\t * Animate the arrow up from startAngle\n\t */\n\tanimate: function (init) {\n\t\tvar series = this;\n\n\t\tif (!init) {\n\t\t\teach(series.points, function (point) {\n\t\t\t\tvar graphic = point.graphic;\n\n\t\t\t\tif (graphic) {\n\t\t\t\t\t// start value\n\t\t\t\t\tgraphic.attr({\n\t\t\t\t\t\trotation: series.yAxis.startAngleRad * 180 / Math.PI\n\t\t\t\t\t});\n\n\t\t\t\t\t// animate\n\t\t\t\t\tgraphic.animate({\n\t\t\t\t\t\trotation: point.shapeArgs.rotation\n\t\t\t\t\t}, series.options.animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// delete this function to allow it only once\n\t\t\tseries.animate = null;\n\t\t}\n\t},\n\t\n\trender: function () {\n\t\tthis.group = this.plotGroup(\n\t\t\t'group', \n\t\t\t'series', \n\t\t\tthis.visible ? 'visible' : 'hidden', \n\t\t\tthis.options.zIndex, \n\t\t\tthis.chart.seriesGroup\n\t\t);\n\t\tseriesTypes.pie.prototype.render.call(this);\n\t\tthis.group.clip(this.chart.clipRect);\n\t},\n\t\n\tsetData: seriesTypes.pie.prototype.setData,\n\tdrawTracker: seriesTypes.column.prototype.drawTracker\n};\nseriesTypes.gauge = Highcharts.extendClass(seriesTypes.line, GaugeSeries);/* ****************************************************************************\n * Start Box plot series code\t\t\t\t\t\t\t\t\t\t\t      *\n *****************************************************************************/\n\n// Set default options\ndefaultPlotOptions.boxplot = merge(defaultPlotOptions.column, {\n\tfillColor: '#FFFFFF',\n\tlineWidth: 1,\n\t//medianColor: null,\n\tmedianWidth: 2,\n\tstates: {\n\t\thover: {\n\t\t\tbrightness: -0.3\n\t\t}\n\t},\n\t//stemColor: null,\n\t//stemDashStyle: 'solid'\n\t//stemWidth: null,\n\tthreshold: null,\n\ttooltip: {\n\t\tpointFormat: '<span style=\"color:{series.color};font-weight:bold\">{series.name}</span><br/>' +\n\t\t\t'Maximum: {point.high}<br/>' +\n\t\t\t'Upper quartile: {point.q3}<br/>' +\n\t\t\t'Median: {point.median}<br/>' +\n\t\t\t'Lower quartile: {point.q1}<br/>' +\n\t\t\t'Minimum: {point.low}<br/>'\n\t\t\t\n\t},\n\t//whiskerColor: null,\n\twhiskerLength: '50%',\n\twhiskerWidth: 2\n});\n\n// Create the series object\nseriesTypes.boxplot = extendClass(seriesTypes.column, {\n\ttype: 'boxplot',\n\tpointArrayMap: ['low', 'q1', 'median', 'q3', 'high'], // array point configs are mapped to this\n\ttoYData: function (point) { // return a plain array for speedy calculation\n\t\treturn [point.low, point.q1, point.median, point.q3, point.high];\n\t},\n\tpointValKey: 'high', // defines the top of the tracker\n\t\n\t/**\n\t * One-to-one mapping from options to SVG attributes\n\t */\n\tpointAttrToOptions: { // mapping between SVG attributes and the corresponding options\n\t\tfill: 'fillColor',\n\t\tstroke: 'color',\n\t\t'stroke-width': 'lineWidth'\n\t},\n\t\n\t/**\n\t * Disable data labels for box plot\n\t */\n\tdrawDataLabels: noop,\n\n\t/**\n\t * Translate data points from raw values x and y to plotX and plotY\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis,\n\t\t\tpointArrayMap = series.pointArrayMap;\n\n\t\tseriesTypes.column.prototype.translate.apply(series);\n\n\t\t// do the translation on each point dimension\n\t\teach(series.points, function (point) {\n\t\t\teach(pointArrayMap, function (key) {\n\t\t\t\tif (point[key] !== null) {\n\t\t\t\t\tpoint[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * Draw the data points\n\t */\n\tdrawPoints: function () {\n\t\tvar series = this,  //state = series.state,\n\t\t\tpoints = series.points,\n\t\t\toptions = series.options,\n\t\t\tchart = series.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tpointAttr,\n\t\t\tq1Plot,\n\t\t\tq3Plot,\n\t\t\thighPlot,\n\t\t\tlowPlot,\n\t\t\tmedianPlot,\n\t\t\tcrispCorr,\n\t\t\tcrispX,\n\t\t\tgraphic,\n\t\t\tstemPath,\n\t\t\tstemAttr,\n\t\t\tboxPath,\n\t\t\twhiskersPath,\n\t\t\twhiskersAttr,\n\t\t\tmedianPath,\n\t\t\tmedianAttr,\n\t\t\twidth,\n\t\t\tleft,\n\t\t\tright,\n\t\t\thalfWidth,\n\t\t\tshapeArgs,\n\t\t\tcolor,\n\t\t\tdoQuartiles = series.doQuartiles !== false, // error bar inherits this series type but doesn't do quartiles\n\t\t\twhiskerLength = parseInt(series.options.whiskerLength, 10) / 100;\n\n\n\t\teach(points, function (point) {\n\n\t\t\tgraphic = point.graphic;\n\t\t\tshapeArgs = point.shapeArgs; // the box\n\t\t\tstemAttr = {};\n\t\t\twhiskersAttr = {};\n\t\t\tmedianAttr = {};\n\t\t\tcolor = point.color || series.color;\n\t\t\t\n\t\t\tif (point.plotY !== UNDEFINED) {\n\n\t\t\t\tpointAttr = point.pointAttr[point.selected ? 'selected' : ''];\n\n\t\t\t\t// crisp vector coordinates\n\t\t\t\twidth = shapeArgs.width;\n\t\t\t\tleft = mathFloor(shapeArgs.x);\n\t\t\t\tright = left + width;\n\t\t\t\thalfWidth = mathRound(width / 2);\n\t\t\t\t//crispX = mathRound(left + halfWidth) + crispCorr;\n\t\t\t\tq1Plot = mathFloor(doQuartiles ? point.q1Plot : point.lowPlot);// + crispCorr;\n\t\t\t\tq3Plot = mathFloor(doQuartiles ? point.q3Plot : point.lowPlot);// + crispCorr;\n\t\t\t\thighPlot = mathFloor(point.highPlot);// + crispCorr;\n\t\t\t\tlowPlot = mathFloor(point.lowPlot);// + crispCorr;\n\t\t\t\t\n\t\t\t\t// Stem attributes\n\t\t\t\tstemAttr.stroke = point.stemColor || options.stemColor || color;\n\t\t\t\tstemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);\n\t\t\t\tstemAttr.dashstyle = point.stemDashStyle || options.stemDashStyle;\n\t\t\t\t\n\t\t\t\t// Whiskers attributes\n\t\t\t\twhiskersAttr.stroke = point.whiskerColor || options.whiskerColor || color;\n\t\t\t\twhiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);\n\t\t\t\t\n\t\t\t\t// Median attributes\n\t\t\t\tmedianAttr.stroke = point.medianColor || options.medianColor || color;\n\t\t\t\tmedianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// The stem\n\t\t\t\tcrispCorr = (stemAttr['stroke-width'] % 2) / 2;\n\t\t\t\tcrispX = left + halfWidth + crispCorr;\t\t\t\t\n\t\t\t\tstemPath = [\n\t\t\t\t\t// stem up\n\t\t\t\t\t'M',\n\t\t\t\t\tcrispX, q3Plot,\n\t\t\t\t\t'L',\n\t\t\t\t\tcrispX, highPlot,\n\t\t\t\t\t\n\t\t\t\t\t// stem down\n\t\t\t\t\t'M',\n\t\t\t\t\tcrispX, q1Plot,\n\t\t\t\t\t'L',\n\t\t\t\t\tcrispX, lowPlot,\n\t\t\t\t\t'z'\n\t\t\t\t];\n\t\t\t\t\n\t\t\t\t// The box\n\t\t\t\tif (doQuartiles) {\n\t\t\t\t\tcrispCorr = (pointAttr['stroke-width'] % 2) / 2;\n\t\t\t\t\tcrispX = mathFloor(crispX) + crispCorr;\n\t\t\t\t\tq1Plot = mathFloor(q1Plot) + crispCorr;\n\t\t\t\t\tq3Plot = mathFloor(q3Plot) + crispCorr;\n\t\t\t\t\tleft += crispCorr;\n\t\t\t\t\tright += crispCorr;\n\t\t\t\t\tboxPath = [\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tleft, q3Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tleft, q1Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tright, q1Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tright, q3Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tleft, q3Plot,\n\t\t\t\t\t\t'z'\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// The whiskers\n\t\t\t\tif (whiskerLength) {\n\t\t\t\t\tcrispCorr = (whiskersAttr['stroke-width'] % 2) / 2;\n\t\t\t\t\thighPlot = highPlot + crispCorr;\n\t\t\t\t\tlowPlot = lowPlot + crispCorr;\n\t\t\t\t\twhiskersPath = [\n\t\t\t\t\t\t// High whisker\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tcrispX - halfWidth * whiskerLength, \n\t\t\t\t\t\thighPlot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tcrispX + halfWidth * whiskerLength, \n\t\t\t\t\t\thighPlot,\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Low whisker\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tcrispX - halfWidth * whiskerLength, \n\t\t\t\t\t\tlowPlot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tcrispX + halfWidth * whiskerLength, \n\t\t\t\t\t\tlowPlot\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// The median\n\t\t\t\tcrispCorr = (medianAttr['stroke-width'] % 2) / 2;\t\t\t\t\n\t\t\t\tmedianPlot = mathRound(point.medianPlot) + crispCorr;\n\t\t\t\tmedianPath = [\n\t\t\t\t\t'M',\n\t\t\t\t\tleft, \n\t\t\t\t\tmedianPlot,\n\t\t\t\t\t'L',\n\t\t\t\t\tright, \n\t\t\t\t\tmedianPlot,\n\t\t\t\t\t'z'\n\t\t\t\t];\n\t\t\t\t\n\t\t\t\t// Create or update the graphics\n\t\t\t\tif (graphic) { // update\n\t\t\t\t\t\n\t\t\t\t\tpoint.stem.animate({ d: stemPath });\n\t\t\t\t\tif (whiskerLength) {\n\t\t\t\t\t\tpoint.whiskers.animate({ d: whiskersPath });\n\t\t\t\t\t}\n\t\t\t\t\tif (doQuartiles) {\n\t\t\t\t\t\tpoint.box.animate({ d: boxPath });\n\t\t\t\t\t}\n\t\t\t\t\tpoint.medianShape.animate({ d: medianPath });\n\t\t\t\t\t\n\t\t\t\t} else { // create new\n\t\t\t\t\tpoint.graphic = graphic = renderer.g()\n\t\t\t\t\t\t.add(series.group);\n\t\t\t\t\t\n\t\t\t\t\tpoint.stem = renderer.path(stemPath)\n\t\t\t\t\t\t.attr(stemAttr)\n\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t\t\n\t\t\t\t\tif (whiskerLength) {\n\t\t\t\t\t\tpoint.whiskers = renderer.path(whiskersPath) \n\t\t\t\t\t\t\t.attr(whiskersAttr)\n\t\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t}\n\t\t\t\t\tif (doQuartiles) {\n\t\t\t\t\t\tpoint.box = renderer.path(boxPath)\n\t\t\t\t\t\t\t.attr(pointAttr)\n\t\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t}\t\n\t\t\t\t\tpoint.medianShape = renderer.path(medianPath)\n\t\t\t\t\t\t.attr(medianAttr)\n\t\t\t\t\t\t.add(graphic);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\n});\n\n/* ****************************************************************************\n * End Box plot series code\t\t\t\t\t\t\t\t\t\t\t\t*\n *****************************************************************************/\n/* ****************************************************************************\n * Start error bar series code                                                *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.errorbar = merge(defaultPlotOptions.boxplot, {\n\tcolor: '#000000',\n\tgrouping: false,\n\tlinkedTo: ':previous',\n\ttooltip: {\n\t\tpointFormat: defaultPlotOptions.arearange.tooltip.pointFormat\n\t},\n\twhiskerWidth: null\n});\n\n// 2 - Create the series object\nseriesTypes.errorbar = extendClass(seriesTypes.boxplot, {\n\ttype: 'errorbar',\n\tpointArrayMap: ['low', 'high'], // array point configs are mapped to this\n\ttoYData: function (point) { // return a plain array for speedy calculation\n\t\treturn [point.low, point.high];\n\t},\n\tpointValKey: 'high', // defines the top of the tracker\n\tdoQuartiles: false,\n\n\t/**\n\t * Get the width and X offset, either on top of the linked series column\n\t * or standalone\n\t */\n\tgetColumnMetrics: function () {\n\t\treturn (this.linkedParent && this.linkedParent.columnMetrics) || \n\t\t\tseriesTypes.column.prototype.getColumnMetrics.call(this);\n\t}\n});\n\n/* ****************************************************************************\n * End error bar series code                                                  *\n *****************************************************************************/\n/* ****************************************************************************\n * Start Waterfall series code                                                *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.waterfall = merge(defaultPlotOptions.column, {\n\tlineWidth: 1,\n\tlineColor: '#333',\n\tdashStyle: 'dot',\n\tborderColor: '#333'\n});\n\n\n// 2 - Create the series object\nseriesTypes.waterfall = extendClass(seriesTypes.column, {\n\ttype: 'waterfall',\n\n\tupColorProp: 'fill',\n\n\tpointArrayMap: ['low', 'y'],\n\n\tpointValKey: 'y',\n\n\t/**\n\t * Init waterfall series, force stacking\n\t */\n\tinit: function (chart, options) {\n\t\t// force stacking\n\t\toptions.stacking = true;\n\n\t\tseriesTypes.column.prototype.init.call(this, chart, options);\n\t},\n\n\n\t/**\n\t * Translate data points from raw values\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\taxis = series.yAxis,\n\t\t\tlen,\n\t\t\ti,\n\t\t\tpoints,\n\t\t\tpoint,\n\t\t\tshapeArgs,\n\t\t\tstack,\n\t\t\ty,\n\t\t\tpreviousY,\n\t\t\tstackPoint,\n\t\t\tthreshold = options.threshold,\n\t\t\tcrispCorr = (options.borderWidth % 2) / 2;\n\n\t\t// run column series translate\n\t\tseriesTypes.column.prototype.translate.apply(this);\n\n\t\tpreviousY = threshold;\n\t\tpoints = series.points;\n\n\t\tfor (i = 0, len = points.length; i < len; i++) {\n\t\t\t// cache current point object\n\t\t\tpoint = points[i];\n\t\t\tshapeArgs = point.shapeArgs;\n\n\t\t\t// get current stack\n\t\t\tstack = series.getStack(i);\n\t\t\tstackPoint = stack.points[series.index];\n\n\t\t\t// override point value for sums\n\t\t\tif (isNaN(point.y)) {\n\t\t\t\tpoint.y = series.yData[i];\n\t\t\t}\n\n\t\t\t// up points\n\t\t\ty = mathMax(previousY, previousY + point.y) + stackPoint[0];\n\t\t\tshapeArgs.y = axis.translate(y, 0, 1);\n\n\n\t\t\t// sum points\n\t\t\tif (point.isSum || point.isIntermediateSum) {\n\t\t\t\tshapeArgs.y = axis.translate(stackPoint[1], 0, 1);\n\t\t\t\tshapeArgs.height = axis.translate(stackPoint[0], 0, 1) - shapeArgs.y;\n\n\t\t\t// if it's not the sum point, update previous stack end position\n\t\t\t} else {\n\t\t\t\tpreviousY += stack.total;\n\t\t\t}\n\n\t\t\t// negative points\n\t\t\tif (shapeArgs.height < 0) {\n\t\t\t\tshapeArgs.y += shapeArgs.height;\n\t\t\t\tshapeArgs.height *= -1;\n\t\t\t}\n\n\t\t\tpoint.plotY = shapeArgs.y = mathRound(shapeArgs.y) - crispCorr;\n\t\t\tshapeArgs.height = mathRound(shapeArgs.height);\n\t\t\tpoint.yBottom = shapeArgs.y + shapeArgs.height;\n\t\t}\n\t},\n\n\t/**\n\t * Call default processData then override yData to reflect waterfall's extremes on yAxis\n\t */\n\tprocessData: function (force) {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tyData = series.yData,\n\t\t\tpoints = series.points,\n\t\t\tpoint,\n\t\t\tdataLength = yData.length,\n\t\t\tthreshold = options.threshold || 0,\n\t\t\tsubSum,\n\t\t\tsum,\n\t\t\tdataMin,\n\t\t\tdataMax,\n\t\t\ty,\n\t\t\ti;\n\n\t\tsum = subSum = dataMin = dataMax = threshold;\n\n\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\ty = yData[i];\n\t\t\tpoint = points && points[i] ? points[i] : {};\n\n\t\t\tif (y === \"sum\" || point.isSum) {\n\t\t\t\tyData[i] = sum;\n\t\t\t} else if (y === \"intermediateSum\" || point.isIntermediateSum) {\n\t\t\t\tyData[i] = subSum;\n\t\t\t\tsubSum = threshold;\n\t\t\t} else {\n\t\t\t\tsum += y;\n\t\t\t\tsubSum += y;\n\t\t\t}\n\t\t\tdataMin = Math.min(sum, dataMin);\n\t\t\tdataMax = Math.max(sum, dataMax);\n\t\t}\n\n\t\tSeries.prototype.processData.call(this, force);\n\n\t\t// Record extremes\n\t\tseries.dataMin = dataMin;\n\t\tseries.dataMax = dataMax;\n\t},\n\n\t/**\n\t * Return y value or string if point is sum\n\t */\n\ttoYData: function (pt) {\n\t\tif (pt.isSum) {\n\t\t\treturn \"sum\";\n\t\t} else if (pt.isIntermediateSum) {\n\t\t\treturn \"intermediateSum\";\n\t\t}\n\n\t\treturn pt.y;\n\t},\n\n\t/**\n\t * Postprocess mapping between options and SVG attributes\n\t */\n\tgetAttribs: function () {\n\t\tseriesTypes.column.prototype.getAttribs.apply(this, arguments);\n\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tstateOptions = options.states,\n\t\t\tupColor = options.upColor || series.color,\n\t\t\thoverColor = Highcharts.Color(upColor).brighten(0.1).get(),\n\t\t\tseriesDownPointAttr = merge(series.pointAttr),\n\t\t\tupColorProp = series.upColorProp;\n\n\t\tseriesDownPointAttr[''][upColorProp] = upColor;\n\t\tseriesDownPointAttr.hover[upColorProp] = stateOptions.hover.upColor || hoverColor;\n\t\tseriesDownPointAttr.select[upColorProp] = stateOptions.select.upColor || upColor;\n\n\t\teach(series.points, function (point) {\n\t\t\tif (point.y > 0 && !point.color) {\n\t\t\t\tpoint.pointAttr = seriesDownPointAttr;\n\t\t\t\tpoint.color = upColor;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Draw columns' connector lines\n\t */\n\tgetGraphPath: function () {\n\n\t\tvar data = this.data,\n\t\t\tlength = data.length,\n\t\t\tlineWidth = this.options.lineWidth + this.options.borderWidth,\n\t\t\tnormalizer = mathRound(lineWidth) % 2 / 2,\n\t\t\tpath = [],\n\t\t\tM = 'M',\n\t\t\tL = 'L',\n\t\t\tprevArgs,\n\t\t\tpointArgs,\n\t\t\ti,\n\t\t\td;\n\n\t\tfor (i = 1; i < length; i++) {\n\t\t\tpointArgs = data[i].shapeArgs;\n\t\t\tprevArgs = data[i - 1].shapeArgs;\n\n\t\t\td = [\n\t\t\t\tM,\n\t\t\t\tprevArgs.x + prevArgs.width, prevArgs.y + normalizer,\n\t\t\t\tL,\n\t\t\t\tpointArgs.x, prevArgs.y + normalizer\n\t\t\t];\n\n\t\t\tif (data[i - 1].y < 0) {\n\t\t\t\td[2] += prevArgs.height;\n\t\t\t\td[5] += prevArgs.height;\n\t\t\t}\n\n\t\t\tpath = path.concat(d);\n\t\t}\n\n\t\treturn path;\n\t},\n\n\t/**\n\t * Extremes are recorded in processData\n\t */\n\tgetExtremes: noop,\n\n\t/**\n\t * Return stack for given index\n\t */\n\tgetStack: function (i) {\n\t\tvar axis = this.yAxis,\n\t\t\tstacks = axis.stacks,\n\t\t\tkey = this.stackKey;\n\n\t\tif (this.processedYData[i] < this.options.threshold) {\n\t\t\tkey = '-' + key;\n\t\t}\n\n\t\treturn stacks[key][i];\n\t},\n\n\tdrawGraph: Series.prototype.drawGraph\n});\n\n/* ****************************************************************************\n * End Waterfall series code                                                  *\n *****************************************************************************/\n/* ****************************************************************************\n * Start Bubble series code\t\t\t\t\t\t\t\t\t\t\t          *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.bubble = merge(defaultPlotOptions.scatter, {\n\tdataLabels: {\n\t\tinside: true,\n\t\tstyle: {\n\t\t\tcolor: 'white',\n\t\t\ttextShadow: '0px 0px 3px black'\n\t\t},\n\t\tverticalAlign: 'middle'\n\t},\n\t// displayNegative: true,\n\tmarker: {\n\t\t// fillOpacity: 0.5,\n\t\tlineColor: null, // inherit from series.color\n\t\tlineWidth: 1\n\t},\n\tminSize: 8,\n\tmaxSize: '20%',\n\t// negativeColor: null,\n\ttooltip: {\n\t\tpointFormat: '({point.x}, {point.y}), Size: {point.z}'\n\t},\n\tturboThreshold: 0,\n\tzThreshold: 0\n});\n\n// 2 - Create the series object\nseriesTypes.bubble = extendClass(seriesTypes.scatter, {\n\ttype: 'bubble',\n\tpointArrayMap: ['y', 'z'],\n\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\t\n\t/**\n\t * Mapping between SVG attributes and the corresponding options\n\t */\n\tpointAttrToOptions: { \n\t\tstroke: 'lineColor',\n\t\t'stroke-width': 'lineWidth',\n\t\tfill: 'fillColor'\n\t},\n\t\n\t/**\n\t * Apply the fillOpacity to all fill positions\n\t */\n\tapplyOpacity: function (fill) {\n\t\tvar markerOptions = this.options.marker,\n\t\t\tfillOpacity = pick(markerOptions.fillOpacity, 0.5);\n\t\t\n\t\t// When called from Legend.colorizeItem, the fill isn't predefined\n\t\tfill = fill || markerOptions.fillColor || this.color; \n\t\t\n\t\tif (fillOpacity !== 1) {\n\t\t\tfill = Highcharts.Color(fill).setOpacity(fillOpacity).get('rgba');\n\t\t}\n\t\treturn fill;\n\t},\n\t\n\t/**\n\t * Extend the convertAttribs method by applying opacity to the fill\n\t */\n\tconvertAttribs: function () {\n\t\tvar obj = Series.prototype.convertAttribs.apply(this, arguments);\n\t\t\n\t\tobj.fill = this.applyOpacity(obj.fill);\n\t\t\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Get the radius for each point based on the minSize, maxSize and each point's Z value. This\n\t * must be done prior to Series.translate because the axis needs to add padding in \n\t * accordance with the point sizes.\n\t */\n\tgetRadii: function (zMin, zMax, minSize, maxSize) {\n\t\tvar len,\n\t\t\ti,\n\t\t\tpos,\n\t\t\tzData = this.zData,\n\t\t\tradii = [],\n\t\t\tzRange;\n\t\t\n\t\t// Set the shape type and arguments to be picked up in drawPoints\n\t\tfor (i = 0, len = zData.length; i < len; i++) {\n\t\t\tzRange = zMax - zMin;\n\t\t\tpos = zRange > 0 ? // relative size, a number between 0 and 1\n\t\t\t\t(zData[i] - zMin) / (zMax - zMin) : \n\t\t\t\t0.5;\n\t\t\tradii.push(math.ceil(minSize + pos * (maxSize - minSize)) / 2);\n\t\t}\n\t\tthis.radii = radii;\n\t},\n\t\n\t/**\n\t * Perform animation on the bubbles\n\t */\n\tanimate: function (init) {\n\t\tvar animation = this.options.animation;\n\t\t\n\t\tif (!init) { // run the animation\n\t\t\teach(this.points, function (point) {\n\t\t\t\tvar graphic = point.graphic,\n\t\t\t\t\tshapeArgs = point.shapeArgs;\n\n\t\t\t\tif (graphic && shapeArgs) {\n\t\t\t\t\t// start values\n\t\t\t\t\tgraphic.attr('r', 1);\n\n\t\t\t\t\t// animate\n\t\t\t\t\tgraphic.animate({\n\t\t\t\t\t\tr: shapeArgs.r\n\t\t\t\t\t}, animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// delete this function to allow it only once\n\t\t\tthis.animate = null;\n\t\t}\n\t},\n\t\n\t/**\n\t * Extend the base translate method to handle bubble size\n\t */\n\ttranslate: function () {\n\t\t\n\t\tvar i,\n\t\t\tdata = this.data,\n\t\t\tpoint,\n\t\t\tradius,\n\t\t\tradii = this.radii;\n\t\t\n\t\t// Run the parent method\n\t\tseriesTypes.scatter.prototype.translate.call(this);\n\t\t\n\t\t// Set the shape type and arguments to be picked up in drawPoints\n\t\ti = data.length;\n\t\t\n\t\twhile (i--) {\n\t\t\tpoint = data[i];\n\t\t\tradius = radii ? radii[i] : 0; // #1737\n\n\t\t\t// Flag for negativeColor to be applied in Series.js\n\t\t\tpoint.negative = point.z < (this.options.zThreshold || 0);\n\t\t\t\n\t\t\tif (radius >= this.minPxSize / 2) {\n\t\t\t\t// Shape arguments\n\t\t\t\tpoint.shapeType = 'circle';\n\t\t\t\tpoint.shapeArgs = {\n\t\t\t\t\tx: point.plotX,\n\t\t\t\t\ty: point.plotY,\n\t\t\t\t\tr: radius\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Alignment box for the data label\n\t\t\t\tpoint.dlBox = {\n\t\t\t\t\tx: point.plotX - radius,\n\t\t\t\t\ty: point.plotY - radius,\n\t\t\t\t\twidth: 2 * radius,\n\t\t\t\t\theight: 2 * radius\n\t\t\t\t};\n\t\t\t} else { // below zThreshold\n\t\t\t\tpoint.shapeArgs = point.plotY = point.dlBox = UNDEFINED; // #1691\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Get the series' symbol in the legend\n\t * \n\t * @param {Object} legend The legend object\n\t * @param {Object} item The series (this) or point\n\t */\n\tdrawLegendSymbol: function (legend, item) {\n\t\tvar radius = pInt(legend.itemStyle.fontSize) / 2;\n\t\t\n\t\titem.legendSymbol = this.chart.renderer.circle(\n\t\t\tradius,\n\t\t\tlegend.baseline - radius,\n\t\t\tradius\n\t\t).attr({\n\t\t\tzIndex: 3\n\t\t}).add(item.legendGroup);\n\t\titem.legendSymbol.isMarker = true;\t\n\t\t\n\t},\n\t\n\tdrawPoints: seriesTypes.column.prototype.drawPoints,\n\talignDataLabel: seriesTypes.column.prototype.alignDataLabel\n});\n\n/**\n * Add logic to pad each axis with the amount of pixels\n * necessary to avoid the bubbles to overflow.\n */\nAxis.prototype.beforePadding = function () {\n\tvar axis = this,\n\t\taxisLength = this.len,\n\t\tchart = this.chart,\n\t\tpxMin = 0, \n\t\tpxMax = axisLength,\n\t\tisXAxis = this.isXAxis,\n\t\tdataKey = isXAxis ? 'xData' : 'yData',\n\t\tmin = this.min,\n\t\textremes = {},\n\t\tsmallestSize = math.min(chart.plotWidth, chart.plotHeight),\n\t\tzMin = Number.MAX_VALUE,\n\t\tzMax = -Number.MAX_VALUE,\n\t\trange = this.max - min,\n\t\ttransA = axisLength / range,\n\t\tactiveSeries = [];\n\n\t// Handle padding on the second pass, or on redraw\n\tif (this.tickPositions) {\n\t\teach(this.series, function (series) {\n\n\t\t\tvar seriesOptions = series.options,\n\t\t\t\tzData;\n\n\t\t\tif (series.type === 'bubble' && series.visible) {\n\n\t\t\t\t// Correction for #1673\n\t\t\t\taxis.allowZoomOutside = true;\n\n\t\t\t\t// Cache it\n\t\t\t\tactiveSeries.push(series);\n\n\t\t\t\tif (isXAxis) { // because X axis is evaluated first\n\t\t\t\t\n\t\t\t\t\t// For each series, translate the size extremes to pixel values\n\t\t\t\t\teach(['minSize', 'maxSize'], function (prop) {\n\t\t\t\t\t\tvar length = seriesOptions[prop],\n\t\t\t\t\t\t\tisPercent = /%$/.test(length);\n\t\t\t\t\t\t\n\t\t\t\t\t\tlength = pInt(length);\n\t\t\t\t\t\textremes[prop] = isPercent ?\n\t\t\t\t\t\t\tsmallestSize * length / 100 :\n\t\t\t\t\t\t\tlength;\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\tseries.minPxSize = extremes.minSize;\n\t\t\t\t\t\n\t\t\t\t\t// Find the min and max Z\n\t\t\t\t\tzData = series.zData;\n\t\t\t\t\tif (zData.length) { // #1735\n\t\t\t\t\t\tzMin = math.min(\n\t\t\t\t\t\t\tzMin,\n\t\t\t\t\t\t\tmath.max(\n\t\t\t\t\t\t\t\tarrayMin(zData), \n\t\t\t\t\t\t\t\tseriesOptions.displayNegative === false ? seriesOptions.zThreshold : -Number.MAX_VALUE\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tzMax = math.max(zMax, arrayMax(zData));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teach(activeSeries, function (series) {\n\n\t\t\tvar data = series[dataKey],\n\t\t\t\ti = data.length,\n\t\t\t\tradius;\n\n\t\t\tif (isXAxis) {\n\t\t\t\tseries.getRadii(zMin, zMax, extremes.minSize, extremes.maxSize);\n\t\t\t}\n\t\t\t\n\t\t\tif (range > 0) {\n\t\t\t\twhile (i--) {\n\t\t\t\t\tradius = series.radii[i];\n\t\t\t\t\tpxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);\n\t\t\t\t\tpxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (activeSeries.length && range > 0 && pick(this.options.min, this.userMin) === UNDEFINED && pick(this.options.max, this.userMax) === UNDEFINED) {\n\t\t\tpxMax -= axisLength;\n\t\t\ttransA *= (axisLength + pxMin - pxMax) / axisLength;\n\t\t\tthis.min += pxMin / transA;\n\t\t\tthis.max += pxMax / transA;\n\t\t}\n\t}\n};\n\n/* ****************************************************************************\n * End Bubble series code                                                     *\n *****************************************************************************/\n/**\n * Extensions for polar charts. Additionally, much of the geometry required for polar charts is\n * gathered in RadialAxes.js.\n * \n */\n\nvar seriesProto = Series.prototype,\n\tpointerProto = Highcharts.Pointer.prototype;\n\n\n\n/**\n * Translate a point's plotX and plotY from the internal angle and radius measures to \n * true plotX, plotY coordinates\n */\nseriesProto.toXY = function (point) {\n\tvar xy,\n\t\tchart = this.chart,\n\t\tplotX = point.plotX,\n\t\tplotY = point.plotY;\n\t\n\t// Save rectangular plotX, plotY for later computation\n\tpoint.rectPlotX = plotX;\n\tpoint.rectPlotY = plotY;\n\t\n\t// Record the angle in degrees for use in tooltip\n\tpoint.clientX = ((plotX / Math.PI * 180) + this.xAxis.pane.options.startAngle) % 360;\n\t\n\t// Find the polar plotX and plotY\n\txy = this.xAxis.postTranslate(point.plotX, this.yAxis.len - plotY);\n\tpoint.plotX = point.polarPlotX = xy.x - chart.plotLeft;\n\tpoint.plotY = point.polarPlotY = xy.y - chart.plotTop;\n};\n\n/** \n * Order the tooltip points to get the mouse capture ranges correct. #1915. \n */\nseriesProto.orderTooltipPoints = function (points) {\n\tif (this.chart.polar) {\n\t\tpoints.sort(function (a, b) {\n\t\t\treturn a.clientX - b.clientX;\n\t\t});\n\n\t\t// Wrap mouse tracking around to capture movement on the segment to the left\n\t\t// of the north point (#1469, #2093).\n\t\tif (points[0]) {\n\t\t\tpoints[0].wrappedClientX = points[0].clientX + 360;\n\t\t\tpoints.push(points[0]);\n\t\t}\n\t}\n};\n\n\n/**\n * Add some special init logic to areas and areasplines\n */\nfunction initArea(proceed, chart, options) {\n\tproceed.call(this, chart, options);\n\tif (this.chart.polar) {\n\t\t\n\t\t/**\n\t\t * Overridden method to close a segment path. While in a cartesian plane the area \n\t\t * goes down to the threshold, in the polar chart it goes to the center.\n\t\t */\n\t\tthis.closeSegment = function (path) {\n\t\t\tvar center = this.xAxis.center;\n\t\t\tpath.push(\n\t\t\t\t'L',\n\t\t\t\tcenter[0],\n\t\t\t\tcenter[1]\n\t\t\t);\t\t\t\n\t\t};\n\t\t\n\t\t// Instead of complicated logic to draw an area around the inner area in a stack,\n\t\t// just draw it behind\n\t\tthis.closedStacks = true;\n\t}\n}\nwrap(seriesTypes.area.prototype, 'init', initArea);\nwrap(seriesTypes.areaspline.prototype, 'init', initArea);\n\t\t\n\n/**\n * Overridden method for calculating a spline from one point to the next\n */\nwrap(seriesTypes.spline.prototype, 'getPointSpline', function (proceed, segment, point, i) {\n\t\n\tvar ret,\n\t\tsmoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc;\n\t\tdenom = smoothing + 1,\n\t\tplotX, \n\t\tplotY,\n\t\tlastPoint,\n\t\tnextPoint,\n\t\tlastX,\n\t\tlastY,\n\t\tnextX,\n\t\tnextY,\n\t\tleftContX,\n\t\tleftContY,\n\t\trightContX,\n\t\trightContY,\n\t\tdistanceLeftControlPoint,\n\t\tdistanceRightControlPoint,\n\t\tleftContAngle,\n\t\trightContAngle,\n\t\tjointAngle;\n\t\t\n\t\t\n\tif (this.chart.polar) {\n\t\t\n\t\tplotX = point.plotX;\n\t\tplotY = point.plotY;\n\t\tlastPoint = segment[i - 1];\n\t\tnextPoint = segment[i + 1];\n\t\t\t\n\t\t// Connect ends\n\t\tif (this.connectEnds) {\n\t\t\tif (!lastPoint) {\n\t\t\t\tlastPoint = segment[segment.length - 2]; // not the last but the second last, because the segment is already connected\n\t\t\t}\n\t\t\tif (!nextPoint) {\n\t\t\t\tnextPoint = segment[1];\n\t\t\t}\t\n\t\t}\n\n\t\t// find control points\n\t\tif (lastPoint && nextPoint) {\n\t\t\n\t\t\tlastX = lastPoint.plotX;\n\t\t\tlastY = lastPoint.plotY;\n\t\t\tnextX = nextPoint.plotX;\n\t\t\tnextY = nextPoint.plotY;\n\t\t\tleftContX = (smoothing * plotX + lastX) / denom;\n\t\t\tleftContY = (smoothing * plotY + lastY) / denom;\n\t\t\trightContX = (smoothing * plotX + nextX) / denom;\n\t\t\trightContY = (smoothing * plotY + nextY) / denom;\n\t\t\tdistanceLeftControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2));\n\t\t\tdistanceRightControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2));\n\t\t\tleftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX);\n\t\t\trightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);\n\t\t\tjointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);\n\t\t\t\t\n\t\t\t\t\n\t\t\t// Ensure the right direction, jointAngle should be in the same quadrant as leftContAngle\n\t\t\tif (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {\n\t\t\t\tjointAngle -= Math.PI;\n\t\t\t}\n\t\t\t\n\t\t\t// Find the corrected control points for a spline straight through the point\n\t\t\tleftContX = plotX + Math.cos(jointAngle) * distanceLeftControlPoint;\n\t\t\tleftContY = plotY + Math.sin(jointAngle) * distanceLeftControlPoint;\n\t\t\trightContX = plotX + Math.cos(Math.PI + jointAngle) * distanceRightControlPoint;\n\t\t\trightContY = plotY + Math.sin(Math.PI + jointAngle) * distanceRightControlPoint;\n\t\t\t\n\t\t\t// Record for drawing in next point\n\t\t\tpoint.rightContX = rightContX;\n\t\t\tpoint.rightContY = rightContY;\n\n\t\t}\n\t\t\n\t\t\n\t\t// moveTo or lineTo\n\t\tif (!i) {\n\t\t\tret = ['M', plotX, plotY];\n\t\t} else { // curve from last point to this\n\t\t\tret = [\n\t\t\t\t'C',\n\t\t\t\tlastPoint.rightContX || lastPoint.plotX,\n\t\t\t\tlastPoint.rightContY || lastPoint.plotY,\n\t\t\t\tleftContX || plotX,\n\t\t\t\tleftContY || plotY,\n\t\t\t\tplotX,\n\t\t\t\tplotY\n\t\t\t];\n\t\t\tlastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later\n\t\t}\n\t\t\n\t\t\n\t} else {\n\t\tret = proceed.call(this, segment, point, i);\n\t}\n\treturn ret;\n});\n\n/**\n * Extend translate. The plotX and plotY values are computed as if the polar chart were a\n * cartesian plane, where plotX denotes the angle in radians and (yAxis.len - plotY) is the pixel distance from\n * center. \n */\nwrap(seriesProto, 'translate', function (proceed) {\n\t\t\n\t// Run uber method\n\tproceed.call(this);\n\t\n\t// Postprocess plot coordinates\n\tif (this.chart.polar && !this.preventPostTranslate) {\n\t\tvar points = this.points,\n\t\t\ti = points.length;\n\t\twhile (i--) {\n\t\t\t// Translate plotX, plotY from angle and radius to true plot coordinates\n\t\t\tthis.toXY(points[i]);\n\t\t}\n\t}\n});\n\n/** \n * Extend getSegmentPath to allow connecting ends across 0 to provide a closed circle in \n * line-like series.\n */\nwrap(seriesProto, 'getSegmentPath', function (proceed, segment) {\n\t\t\n\tvar points = this.points;\n\t\n\t// Connect the path\n\tif (this.chart.polar && this.options.connectEnds !== false && \n\t\t\tsegment[segment.length - 1] === points[points.length - 1] && points[0].y !== null) {\n\t\tthis.connectEnds = true; // re-used in splines\n\t\tsegment = [].concat(segment, [points[0]]);\n\t}\n\t\n\t// Run uber method\n\treturn proceed.call(this, segment);\n\t\n});\n\n\nfunction polarAnimate(proceed, init) {\n\tvar chart = this.chart,\n\t\tanimation = this.options.animation,\n\t\tgroup = this.group,\n\t\tmarkerGroup = this.markerGroup,\n\t\tcenter = this.xAxis.center,\n\t\tplotLeft = chart.plotLeft,\n\t\tplotTop = chart.plotTop,\n\t\tattribs;\n\n\t// Specific animation for polar charts\n\tif (chart.polar) {\n\t\t\n\t\t// Enable animation on polar charts only in SVG. In VML, the scaling is different, plus animation\n\t\t// would be so slow it would't matter.\n\t\tif (chart.renderer.isSVG) {\n\n\t\t\tif (animation === true) {\n\t\t\t\tanimation = {};\n\t\t\t}\n\t\n\t\t\t// Initialize the animation\n\t\t\tif (init) {\n\t\t\t\t\n\t\t\t\t// Scale down the group and place it in the center\n\t\t\t\tattribs = {\n\t\t\t\t\ttranslateX: center[0] + plotLeft,\n\t\t\t\t\ttranslateY: center[1] + plotTop,\n\t\t\t\t\tscaleX: 0.001, // #1499\n\t\t\t\t\tscaleY: 0.001\n\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tgroup.attr(attribs);\n\t\t\t\tif (markerGroup) {\n\t\t\t\t\tmarkerGroup.attrSetters = group.attrSetters;\n\t\t\t\t\tmarkerGroup.attr(attribs);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t// Run the animation\n\t\t\t} else {\n\t\t\t\tattribs = {\n\t\t\t\t\ttranslateX: plotLeft,\n\t\t\t\t\ttranslateY: plotTop,\n\t\t\t\t\tscaleX: 1,\n\t\t\t\t\tscaleY: 1\n\t\t\t\t};\n\t\t\t\tgroup.animate(attribs, animation);\n\t\t\t\tif (markerGroup) {\n\t\t\t\t\tmarkerGroup.animate(attribs, animation);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Delete this function to allow it only once\n\t\t\t\tthis.animate = null;\n\t\t\t}\n\t\t}\n\t\n\t// For non-polar charts, revert to the basic animation\n\t} else {\n\t\tproceed.call(this, init);\n\t} \n}\n\n// Define the animate method for both regular series and column series and their derivatives\nwrap(seriesProto, 'animate', polarAnimate);\nwrap(colProto, 'animate', polarAnimate);\n\n\n/**\n * Throw in a couple of properties to let setTooltipPoints know we're indexing the points\n * in degrees (0-360), not plot pixel width.\n */\nwrap(seriesProto, 'setTooltipPoints', function (proceed, renew) {\n\t\t\n\tif (this.chart.polar) {\n\t\textend(this.xAxis, {\n\t\t\ttooltipLen: 360 // degrees are the resolution unit of the tooltipPoints array\n\t\t});\t\n\t}\n\t\n\t// Run uber method\n\treturn proceed.call(this, renew);\n});\n\n\n/**\n * Extend the column prototype's translate method\n */\nwrap(colProto, 'translate', function (proceed) {\n\t\t\n\tvar xAxis = this.xAxis,\n\t\tlen = this.yAxis.len,\n\t\tcenter = xAxis.center,\n\t\tstartAngleRad = xAxis.startAngleRad,\n\t\trenderer = this.chart.renderer,\n\t\tstart,\n\t\tpoints,\n\t\tpoint,\n\t\ti;\n\t\n\tthis.preventPostTranslate = true;\n\t\n\t// Run uber method\n\tproceed.call(this);\n\t\n\t// Postprocess plot coordinates\n\tif (xAxis.isRadial) {\n\t\tpoints = this.points;\n\t\ti = points.length;\n\t\twhile (i--) {\n\t\t\tpoint = points[i];\n\t\t\tstart = point.barX + startAngleRad;\n\t\t\tpoint.shapeType = 'path';\n\t\t\tpoint.shapeArgs = {\n\t\t\t\td: renderer.symbols.arc(\n\t\t\t\t\tcenter[0],\n\t\t\t\t\tcenter[1],\n\t\t\t\t\tlen - point.plotY,\n\t\t\t\t\tnull, \n\t\t\t\t\t{\n\t\t\t\t\t\tstart: start,\n\t\t\t\t\t\tend: start + point.pointWidth,\n\t\t\t\t\t\tinnerR: len - pick(point.yBottom, len)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t};\n\t\t\tthis.toXY(point); // provide correct plotX, plotY for tooltip\n\t\t}\n\t}\n});\n\n\n/**\n * Align column data labels outside the columns. #1199.\n */\nwrap(colProto, 'alignDataLabel', function (proceed, point, dataLabel, options, alignTo, isNew) {\n\t\n\tif (this.chart.polar) {\n\t\tvar angle = point.rectPlotX / Math.PI * 180,\n\t\t\talign,\n\t\t\tverticalAlign;\n\t\t\n\t\t// Align nicely outside the perimeter of the columns\n\t\tif (options.align === null) {\n\t\t\tif (angle > 20 && angle < 160) {\n\t\t\t\talign = 'left'; // right hemisphere\n\t\t\t} else if (angle > 200 && angle < 340) {\n\t\t\t\talign = 'right'; // left hemisphere\n\t\t\t} else {\n\t\t\t\talign = 'center'; // top or bottom\n\t\t\t}\n\t\t\toptions.align = align;\n\t\t}\n\t\tif (options.verticalAlign === null) {\n\t\t\tif (angle < 45 || angle > 315) {\n\t\t\t\tverticalAlign = 'bottom'; // top part\n\t\t\t} else if (angle > 135 && angle < 225) {\n\t\t\t\tverticalAlign = 'top'; // bottom part\n\t\t\t} else {\n\t\t\t\tverticalAlign = 'middle'; // left or right\n\t\t\t}\n\t\t\toptions.verticalAlign = verticalAlign;\n\t\t}\n\t\t\n\t\tseriesProto.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n\t} else {\n\t\tproceed.call(this, point, dataLabel, options, alignTo, isNew);\n\t}\n\t\n});\n\n/**\n * Extend the mouse tracker to return the tooltip position index in terms of\n * degrees rather than pixels\n */\nwrap(pointerProto, 'getIndex', function (proceed, e) {\n\tvar ret,\n\t\tchart = this.chart,\n\t\tcenter,\n\t\tx,\n\t\ty;\n\t\n\tif (chart.polar) {\n\t\tcenter = chart.xAxis[0].center;\n\t\tx = e.chartX - center[0] - chart.plotLeft;\n\t\ty = e.chartY - center[1] - chart.plotTop;\n\t\t\n\t\tret = 180 - Math.round(Math.atan2(x, y) / Math.PI * 180);\n\t\n\t} else {\n\t\n\t\t// Run uber method\n\t\tret = proceed.call(this, e);\n\t}\n\treturn ret;\n});\n\n/**\n * Extend getCoordinates to prepare for polar axis values\n */\nwrap(pointerProto, 'getCoordinates', function (proceed, e) {\n\tvar chart = this.chart,\n\t\tret = {\n\t\t\txAxis: [],\n\t\t\tyAxis: []\n\t\t};\n\t\n\tif (chart.polar) {\t\n\n\t\teach(chart.axes, function (axis) {\n\t\t\tvar isXAxis = axis.isXAxis,\n\t\t\t\tcenter = axis.center,\n\t\t\t\tx = e.chartX - center[0] - chart.plotLeft,\n\t\t\t\ty = e.chartY - center[1] - chart.plotTop;\n\t\t\t\n\t\t\tret[isXAxis ? 'xAxis' : 'yAxis'].push({\n\t\t\t\taxis: axis,\n\t\t\t\tvalue: axis.translate(\n\t\t\t\t\tisXAxis ?\n\t\t\t\t\t\tMath.PI - Math.atan2(x, y) : // angle \n\t\t\t\t\t\tMath.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), // distance from center\n\t\t\t\t\ttrue\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\t\t\n\t} else {\n\t\tret = proceed.call(this, e);\n\t}\n\t\n\treturn ret;\n});\n}(Highcharts));\n"]}