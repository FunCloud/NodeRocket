{"version":3,"sources":["data.src.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFC,WAAU,UAAV,EAAsB;;;AAGtB,KAAI,OAAO,WAAW,IAAtB;;;AAIA,KAAI,OAAO,UAAU,WAAV,EAAuB,YAAvB,EAAqC;AAC/C,OAAK,IAAL,CAAU,WAAV,EAAuB,YAAvB;AACA,EAFD;;;AAKA,YAAW,MAAX,CAAkB,KAAK,SAAvB,EAAkC;;;;;AAKlC,QAAM,UAAU,OAAV,EAAmB,YAAnB,EAAiC;AACtC,QAAK,OAAL,GAAe,OAAf;AACA,QAAK,YAAL,GAAoB,YAApB;AACA,QAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,KAAK,aAAL,CAAmB,QAAQ,IAA3B,CAAnB,IAAuD,EAAtE;;;AAGA,OAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB;AACxB,SAAK,SAAL;;;AAGA,IAJD,MAIO;;;AAGN,SAAK,QAAL;;;AAGA,SAAK,UAAL;;;AAGA,SAAK,sBAAL;AACA;AAED,GA3BiC;;;;;;;AAkClC,yBAAuB,YAAY;AAClC,OAAI,eAAe,KAAK,YAAxB;AAAA,OACC,gBAAgB,UAAU,IAAV,EAAgB;AAC/B,WAAO,CAAC,WAAW,WAAX,CAAuB,QAAQ,MAA/B,EAAuC,SAAvC,CAAiD,aAAjD,IAAkE,CAAC,CAAD,CAAnE,EAAwE,MAA/E;AACA,IAHF;AAAA,OAIC,aAAa,gBAAgB,aAAa,KAA7B,IAAsC,aAAa,KAAb,CAAmB,IAJvE;AAAA,OAKC,mBAAmB,EALpB;;AAOA,QAAM,gBAAgB,aAAa,MAA9B,IAAyC,EAA9C,EAAkD,UAAU,MAAV,EAAkB;AACnE,qBAAiB,IAAjB,CAAsB,cAAc,OAAO,IAAP,IAAe,UAA7B,CAAtB;AACA,IAFD;;AAIA,QAAK,UAAL,GAAkB;AACjB,YAAQ,cAAc,UAAd,CADS;AAEjB,gBAAY;AAFK,IAAlB;AAIA,GAlDiC;;AAqDlC,aAAW,YAAY;;AAEtB,QAAK,UAAL;;;AAGA,QAAK,aAAL;;;AAGA,QAAK,MAAL;;;AAGA,QAAK,QAAL;AAEA,GAlEiC;;;;;AAuElC,YAAU,YAAY;AACrB,OAAI,OAAO,IAAX;AAAA,OACC,UAAU,KAAK,OADhB;AAAA,OAEC,MAAM,QAAQ,GAFf;AAAA,OAGC,UAAU,KAAK,OAHhB;AAAA,OAIC,WAAW,QAAQ,QAAR,IAAoB,CAJhC;AAAA,OAKC,SAAS,QAAQ,MAAR,IAAkB,OAAO,SALnC;AAAA,OAMC,cAAc,QAAQ,WAAR,IAAuB,CANtC;AAAA,OAOC,YAAY,QAAQ,SAAR,IAAqB,OAAO,SAPzC;AAAA,OAQC,KARD;AAAA,OASC,cAAc,CATf;;AAWA,OAAI,GAAJ,EAAS;;AAER,YAAQ,IACN,OADM,CACE,OADF,EACW,IADX,C;AAAA,KAEN,OAFM,CAEE,KAFF,EAES,IAFT,C;AAAA,KAGN,KAHM,CAGA,QAAQ,aAAR,IAAyB,IAHzB,CAAR;;AAKA,SAAK,KAAL,EAAY,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AAClC,SAAI,UAAU,KAAK,IAAL,CAAU,IAAV,CAAd;AAAA,SACC,YAAY,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CADtC;AAAA,SAEC,UAAU,YAAY,EAFvB;AAAA,SAGC,KAHD;;AAKA,SAAI,SAAS,QAAT,IAAqB,SAAS,MAA9B,IAAwC,CAAC,SAAzC,IAAsD,CAAC,OAA3D,EAAoE;AACnE,cAAQ,KAAK,KAAL,CAAW,QAAQ,aAAR,IAAyB,GAApC,CAAR;AACA,WAAK,KAAL,EAAY,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AAClC,WAAI,SAAS,WAAT,IAAwB,SAAS,SAArC,EAAgD;AAC/C,YAAI,CAAC,QAAQ,QAAQ,WAAhB,CAAL,EAAmC;AAClC,iBAAQ,QAAQ,WAAhB,IAA+B,EAA/B;AACA;;AAED,gBAAQ,QAAQ,WAAhB,EAA6B,WAA7B,IAA4C,IAA5C;AACA;AACD,OARD;AASA,qBAAe,CAAf;AACA;AACD,KAnBD;;AAqBA,SAAK,SAAL;AACA;AACD,GAjHiC;;;;;AAsHlC,cAAY,YAAY;AACvB,OAAI,UAAU,KAAK,OAAnB;AAAA,OACC,QAAQ,QAAQ,KADjB;AAAA,OAEC,UAAU,KAAK,OAFhB;AAAA,OAGC,WAAW,QAAQ,QAAR,IAAoB,CAHhC;AAAA,OAIC,SAAS,QAAQ,MAAR,IAAkB,OAAO,SAJnC;AAAA,OAKC,cAAc,QAAQ,WAAR,IAAuB,CALtC;AAAA,OAMC,YAAY,QAAQ,SAAR,IAAqB,OAAO,SANzC;AAAA,OAOC,KAPD;;AASA,OAAI,KAAJ,EAAW;;AAEV,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,aAAQ,SAAS,cAAT,CAAwB,KAAxB,CAAR;AACA;;AAED,SAAK,MAAM,oBAAN,CAA2B,IAA3B,CAAL,EAAuC,UAAU,EAAV,EAAc,KAAd,EAAqB;AAC3D,aAAQ,CAAR;AACA,SAAI,SAAS,QAAT,IAAqB,SAAS,MAAlC,EAA0C;AACzC,WAAK,GAAG,UAAR,EAAoB,UAAU,IAAV,EAAgB;AACnC,WAAI,CAAC,KAAK,OAAL,KAAiB,IAAjB,IAAyB,KAAK,OAAL,KAAiB,IAA3C,KAAoD,SAAS,WAA7D,IAA4E,SAAS,SAAzF,EAAoG;AACnG,YAAI,CAAC,QAAQ,KAAR,CAAL,EAAqB;AACpB,iBAAQ,KAAR,IAAiB,EAAjB;AACA;AACD,gBAAQ,KAAR,EAAe,QAAQ,QAAvB,IAAmC,KAAK,SAAxC;;AAEA,iBAAS,CAAT;AACA;AACD,OATD;AAUA;AACD,KAdD;;AAgBA,SAAK,SAAL,G;AACA;AACD,GAxJiC;;;;;;AA8JlC,0BAAwB,YAAY;AACnC,OAAI,OAAO,IAAX;AAAA,OACC,UAAU,KAAK,OADhB;AAAA,OAEC,uBAAuB,QAAQ,oBAFhC;AAAA,OAGC,UAAU,KAAK,OAHhB;AAAA,OAIC,WAAW,QAAQ,QAAR,IAAoB,CAJhC;AAAA,OAKC,SAAS,QAAQ,MAAR,IAAkB,OAAO,SALnC;AAAA,OAMC,cAAc,QAAQ,WAAR,IAAuB,CANtC;AAAA,OAOC,YAAY,QAAQ,SAAR,IAAqB,OAAO,SAPzC;AAAA,OAQC,EARD;AAAA,O;AASC,KATD,C;;AAWA,OAAI,oBAAJ,EAA0B;AACzB,WAAO,OAAP,CAAe,iDACZ,oBADY,GACW,GADX,IACkB,QAAQ,0BAAR,IAAsC,KADxD,IAEX,8CAFJ,EAGI,UAAU,IAAV,EAAgB;;;AAGnB,SAAI,QAAQ,KAAK,IAAL,CAAU,KAAtB;AAAA,SACC,IADD;AAAA,SAEC,YAAY,MAAM,MAFnB;AAAA,SAGC,WAAW,CAHZ;AAAA,SAIC,WAAW,CAJZ;AAAA,SAKC,CALD;;;;AASA,UAAK,IAAI,CAAT,EAAY,IAAI,SAAhB,EAA2B,GAA3B,EAAgC;AAC/B,aAAO,MAAM,CAAN,CAAP;AACA,iBAAW,KAAK,GAAL,CAAS,QAAT,EAAmB,KAAK,OAAL,CAAa,GAAhC,CAAX;AACA,iBAAW,KAAK,GAAL,CAAS,QAAT,EAAmB,KAAK,OAAL,CAAa,GAAhC,CAAX;AACA;;;AAGD,UAAK,IAAI,CAAT,EAAY,IAAI,QAAhB,EAA0B,GAA1B,EAA+B;AAC9B,UAAI,KAAK,WAAL,IAAoB,KAAK,SAA7B,EAAwC;;AAEvC,eAAQ,IAAI,WAAZ,IAA2B,EAA3B;;;AAGA,eAAQ,IAAI,WAAZ,EAAyB,MAAzB,GAAkC,KAAK,GAAL,CAAS,QAAT,EAAmB,SAAS,QAA5B,CAAlC;AACA;AACD;;;;AAID,UAAK,IAAI,CAAT,EAAY,IAAI,SAAhB,EAA2B,GAA3B,EAAgC;AAC/B,aAAO,MAAM,CAAN,CAAP;AACA,WAAK,KAAK,OAAL,CAAa,GAAb,GAAmB,CAAxB,C;AACA,WAAK,KAAK,OAAL,CAAa,GAAb,GAAmB,CAAxB,C;;;;AAIA,UAAI,MAAM,WAAN,IAAqB,MAAM,SAA3B,IACH,MAAM,QADH,IACe,MAAM,MADzB,EACiC;AAChC,eAAQ,KAAK,WAAb,EAA0B,KAAK,QAA/B,IAA2C,KAAK,OAAL,CAAa,EAAxD;AACA;AACD;AACD,UAAK,SAAL;AACA,KA/CD;AAgDA;AACD,GA5NiC;;;;;;;AAmOlC,iBAAe,YAAY;AAC1B,OAAI,YAAY,CAAhB;AACA,QAAK,KAAK,OAAV,EAAmB,UAAU,MAAV,EAAkB;AACpC,QAAI,OAAO,OAAO,CAAP,CAAP,KAAqB,QAAzB,EAAmC;AAClC,iBAAY,IAAZ;AACA;AACD,IAJD;AAKA,QAAK,SAAL,GAAiB,CAAjB;AACA,GA3OiC;;;;;AAgPlC,QAAM,UAAU,GAAV,EAAe;AACpB,UAAO,OAAO,GAAP,KAAe,QAAf,GAA0B,IAAI,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,CAA1B,GAA0D,GAAjE;AACA,GAlPiC;;;;;;AAwPlC,cAAY,YAAY;AACvB,OAAI,UAAU,KAAK,OAAnB;AAAA,OACC,MAAM,QAAQ,MADf;AAAA,OAEC,GAFD;AAAA,OAGC,GAHD;AAAA,OAIC,QAJD;AAAA,OAKC,OALD;AAAA,OAMC,OAND;;AAQA,UAAO,KAAP,EAAc;AACb,UAAM,QAAQ,GAAR,EAAa,MAAnB;AACA,WAAO,KAAP,EAAc;AACb,WAAM,QAAQ,GAAR,EAAa,GAAb,CAAN;AACA,gBAAW,WAAW,GAAX,CAAX;AACA,eAAU,KAAK,IAAL,CAAU,GAAV,CAAV;;;AAGA,SAAI,WAAW,QAAf,EAAyB;;;AAExB,cAAQ,GAAR,EAAa,GAAb,IAAoB,QAApB;;;AAGA,UAAI,WAAW,MAAM,EAAN,GAAW,IAAX,GAAkB,IAAjC,EAAuC;AACtC,eAAQ,GAAR,EAAa,UAAb,GAA0B,IAA1B;AACA,OAFD,MAEO;AACN,eAAQ,GAAR,EAAa,SAAb,GAAyB,IAAzB;AACA;AAED,MAXD,MAWO;;AACN,gBAAU,KAAK,SAAL,CAAe,GAAf,CAAV;;AAEA,UAAI,QAAQ,CAAR,IAAa,OAAO,OAAP,KAAmB,QAAhC,IAA4C,CAAC,MAAM,OAAN,CAAjD,EAAiE;;AAChE,eAAQ,GAAR,EAAa,GAAb,IAAoB,OAApB;AACA,eAAQ,GAAR,EAAa,UAAb,GAA0B,IAA1B;AAEA,OAJD,MAIO;;AACN,eAAQ,GAAR,EAAa,GAAb,IAAoB,YAAY,EAAZ,GAAiB,IAAjB,GAAwB,OAA5C;AACA;AACD;AAED;AACD;AACD,GAlSiC;;AAoSlC,eAAa;AACZ,iBAAc;AACb,WAAO,oCADM;AAEb,YAAQ,UAAU,KAAV,EAAiB;AACxB,YAAO,KAAK,GAAL,CAAS,CAAC,MAAM,CAAN,CAAV,EAAoB,MAAM,CAAN,IAAW,CAA/B,EAAkC,CAAC,MAAM,CAAN,CAAnC,CAAP;AACA;AAJY;AADF,GApSqB;;;;;AAgTlC,aAAW,UAAU,GAAV,EAAe;AACzB,OAAI,YAAY,KAAK,OAAL,CAAa,SAA7B;AAAA,OACC,GADD;AAAA,OAEC,GAFD;AAAA,OAGC,MAHD;AAAA,OAIC,KAJD;;AAMA,OAAI,SAAJ,EAAe;AACd,UAAM,UAAU,GAAV,CAAN;AACA;;AAED,OAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC5B,SAAK,GAAL,IAAY,KAAK,WAAjB,EAA8B;AAC7B,cAAS,KAAK,WAAL,CAAiB,GAAjB,CAAT;AACA,aAAQ,IAAI,KAAJ,CAAU,OAAO,KAAjB,CAAR;AACA,SAAI,KAAJ,EAAW;AACV,YAAM,OAAO,MAAP,CAAc,KAAd,CAAN;AACA;AACD;AACD;AACD,UAAO,GAAP;AACA,GArUiC;;;;;AA0UlC,iBAAe,UAAU,IAAV,EAAgB;AAC9B,OAAI,GAAJ,EACC,UADD,EAEC,GAFD,EAGC,UAHD,EAIC,OAJD;;AAMA,OAAI,IAAJ,EAAU;AACT,cAAU,EAAV;AACA,iBAAa,KAAK,MAAlB;AACA,SAAK,MAAM,CAAX,EAAc,MAAM,UAApB,EAAgC,KAAhC,EAAuC;AACtC,kBAAa,KAAK,GAAL,EAAU,MAAvB;AACA,UAAK,MAAM,CAAX,EAAc,MAAM,UAApB,EAAgC,KAAhC,EAAuC;AACtC,UAAI,CAAC,QAAQ,GAAR,CAAL,EAAmB;AAClB,eAAQ,GAAR,IAAe,EAAf;AACA;AACD,cAAQ,GAAR,EAAa,GAAb,IAAoB,KAAK,GAAL,EAAU,GAAV,CAApB;AACA;AACD;AACD;AACD,UAAO,OAAP;AACA,GA/ViC;;;;;AAoWlC,UAAQ,YAAY;AACnB,OAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB;AACxB,SAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB,EAA+B,KAAK,OAApC;AACA;AACD,GAxWiC;;;;;;AA8WlC,YAAU,YAAY;;AAErB,OAAI,UAAU,KAAK,OAAnB;AAAA,OACC,QADD;AAAA,OAEC,IAFD;AAAA,OAGC,UAAU,KAAK,OAHhB;AAAA,OAIC,UAJD;AAAA,OAKC,MALD;AAAA,OAMC,IAND;AAAA,OAOC,CAPD;AAAA,OAQC,CARD;AAAA,OASC,WATD;;AAYA,OAAI,QAAQ,QAAZ,EAAsB;;AAErB,SAAK,qBAAL;;;AAGA,QAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB;AACvB,gBAAW,QAAQ,KAAR,EAAX;AACA,SAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACzB,eAAS,KAAT,G;AACA;;AAGD,SAAI,SAAS,UAAb,EAAyB;AACxB,aAAO,UAAP;AACA,MAFD,MAEO,IAAI,CAAC,SAAS,SAAd,EAAyB;AAC/B,aAAO,UAAP;AACA;AACD;;;AAGD,SAAK,IAAI,CAAT,EAAY,IAAI,QAAQ,MAAxB,EAAgC,GAAhC,EAAqC;AACpC,SAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACzB,cAAQ,CAAR,EAAW,IAAX,GAAkB,QAAQ,CAAR,EAAW,KAAX,EAAlB;AACA;AACD;;;AAGD,aAAS,EAAT;AACA,SAAK,IAAI,CAAJ,EAAO,cAAc,CAA1B,EAA6B,IAAI,QAAQ,MAAzC,EAAiD,aAAjD,EAAgE;;;AAG/D,kBAAa,WAAW,IAAX,CAAgB,KAAK,UAAL,CAAgB,UAAhB,CAA2B,WAA3B,CAAhB,EAAyD,KAAK,UAAL,CAAgB,MAAzE,CAAb;;;AAGA,YAAO,EAAP;AACA,UAAK,IAAI,CAAT,EAAY,IAAI,QAAQ,CAAR,EAAW,MAA3B,EAAmC,GAAnC,EAAwC;AACvC,WAAK,CAAL,IAAU,CACT,SAAS,CAAT,CADS,EAET,QAAQ,CAAR,EAAW,CAAX,MAAkB,SAAlB,GAA8B,QAAQ,CAAR,EAAW,CAAX,CAA9B,GAA8C,IAFrC,CAAV;AAIA,UAAI,aAAa,CAAjB,EAAoB;AACnB,YAAK,CAAL,EAAQ,IAAR,CAAa,QAAQ,IAAI,CAAZ,EAAe,CAAf,MAAsB,SAAtB,GAAkC,QAAQ,IAAI,CAAZ,EAAe,CAAf,CAAlC,GAAsD,IAAnE;AACA;AACD,UAAI,aAAa,CAAjB,EAAoB;AACnB,YAAK,CAAL,EAAQ,IAAR,CAAa,QAAQ,IAAI,CAAZ,EAAe,CAAf,MAAsB,SAAtB,GAAkC,QAAQ,IAAI,CAAZ,EAAe,CAAf,CAAlC,GAAsD,IAAnE;AACA;AACD,UAAI,aAAa,CAAjB,EAAoB;AACnB,YAAK,CAAL,EAAQ,IAAR,CAAa,QAAQ,IAAI,CAAZ,EAAe,CAAf,MAAsB,SAAtB,GAAkC,QAAQ,IAAI,CAAZ,EAAe,CAAf,CAAlC,GAAsD,IAAnE;AACA;AACD,UAAI,aAAa,CAAjB,EAAoB;AACnB,YAAK,CAAL,EAAQ,IAAR,CAAa,QAAQ,IAAI,CAAZ,EAAe,CAAf,MAAsB,SAAtB,GAAkC,QAAQ,IAAI,CAAZ,EAAe,CAAf,CAAlC,GAAsD,IAAnE;AACA;AACD;;;AAGD,YAAO,WAAP,IAAsB;AACrB,YAAM,QAAQ,CAAR,EAAW,IADI;AAErB,YAAM;AAFe,MAAtB;;AAKA,UAAK,UAAL;AACA;;;AAGD,YAAQ,QAAR,CAAiB;AAChB,YAAO;AACN,YAAM;AADA,MADS;AAIhB,aAAQ;AAJQ,KAAjB;AAMA;AACD;AAnciC,EAAlC;;;AAucA,YAAW,IAAX,GAAkB,IAAlB;AACA,YAAW,IAAX,GAAkB,UAAU,OAAV,EAAmB,YAAnB,EAAiC;AAClD,SAAO,IAAI,IAAJ,CAAS,OAAT,EAAkB,YAAlB,CAAP;AACA,EAFD;;;;AAMA,YAAW,IAAX,CAAgB,WAAW,KAAX,CAAiB,SAAjC,EAA4C,MAA5C,EAAoD,UAAU,OAAV,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C;AAC7F,MAAI,QAAQ,IAAZ;;AAEA,MAAI,eAAe,YAAY,IAA/B,EAAqC;AACpC,cAAW,IAAX,CAAgB,WAAW,MAAX,CAAkB,YAAY,IAA9B,EAAoC;AACnD,cAAU,UAAU,WAAV,EAAuB;;;AAGhC,SAAI,YAAY,MAAhB,EAAwB;AACvB,WAAK,YAAY,MAAjB,EAAyB,UAAU,MAAV,EAAkB,CAAlB,EAAqB;AAC7C,mBAAY,MAAZ,CAAmB,CAAnB,IAAwB,WAAW,KAAX,CAAiB,MAAjB,EAAyB,YAAY,MAAZ,CAAmB,CAAnB,CAAzB,CAAxB;AACA,OAFD;AAGA;;;AAGD,mBAAc,WAAW,KAAX,CAAiB,WAAjB,EAA8B,WAA9B,CAAd;;AAEA,aAAQ,IAAR,CAAa,KAAb,EAAoB,WAApB,EAAiC,QAAjC;AACA;AAdkD,IAApC,CAAhB,EAeI,WAfJ;AAgBA,GAjBD,MAiBO;AACN,WAAQ,IAAR,CAAa,KAAb,EAAoB,WAApB,EAAiC,QAAjC;AACA;AACD,EAvBD;AAyBA,CAnfA,EAmfC,UAnfD,CAAD","file":"data.src-compiled.js","sourcesContent":["/**\n * @license Data plugin for Highcharts\n *\n * (c) 2012-2013 Torstein HÃ¸nsi\n * Last revision 2013-06-07\n *\n * License: www.highcharts.com/license\n */\n\n/*\n * The Highcharts Data plugin is a utility to ease parsing of input sources like\n * CSV, HTML tables or grid views into basic configuration options for use \n * directly in the Highcharts constructor.\n *\n * Demo: http://jsfiddle.net/highcharts/SnLFj/\n *\n * --- OPTIONS ---\n *\n * - columns : Array<Array<Mixed>>\n * A two-dimensional array representing the input data on tabular form. This input can\n * be used when the data is already parsed, for example from a grid view component.\n * Each cell can be a string or number. If not switchRowsAndColumns is set, the columns\n * are interpreted as series. See also the rows option.\n *\n * - complete : Function(chartOptions)\n * The callback that is evaluated when the data is finished loading, optionally from an \n * external source, and parsed. The first argument passed is a finished chart options\n * object, containing series and an xAxis with categories if applicable. Thise options\n * can be extended with additional options and passed directly to the chart constructor.\n *\n * - csv : String\n * A comma delimited string to be parsed. Related options are startRow, endRow, startColumn\n * and endColumn to delimit what part of the table is used. The lineDelimiter and \n * itemDelimiter options define the CSV delimiter formats.\n * \n * - endColumn : Integer\n * In tabular input data, the first row (indexed by 0) to use. Defaults to the last \n * column containing data.\n *\n * - endRow : Integer\n * In tabular input data, the last row (indexed by 0) to use. Defaults to the last row\n * containing data.\n *\n * - googleSpreadsheetKey : String \n * A Google Spreadsheet key. See https://developers.google.com/gdata/samples/spreadsheet_sample\n * for general information on GS.\n *\n * - googleSpreadsheetWorksheet : String \n * The Google Spreadsheet worksheet. The available id's can be read from \n * https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic\n *\n * - itemDelimiter : String\n * Item or cell delimiter for parsing CSV. Defaults to \",\".\n *\n * - lineDelimiter : String\n * Line delimiter for parsing CSV. Defaults to \"\\n\".\n *\n * - parsed : Function\n * A callback function to access the parsed columns, the two-dimentional input data\n * array directly, before they are interpreted into series data and categories.\n *\n * - parseDate : Function\n * A callback function to parse string representations of dates into JavaScript timestamps.\n * Return an integer on success.\n *\n * - rows : Array<Array<Mixed>>\n * The same as the columns input option, but defining rows intead of columns.\n *\n * - startColumn : Integer\n * In tabular input data, the first column (indexed by 0) to use. \n *\n * - startRow : Integer\n * In tabular input data, the first row (indexed by 0) to use.\n *\n * - table : String|HTMLElement\n * A HTML table or the id of such to be parsed as input data. Related options ara startRow,\n * endRow, startColumn and endColumn to delimit what part of the table is used.\n */\n\n// JSLint options:\n/*global jQuery */\n\n(function (Highcharts) {\t\n\t\n\t// Utilities\n\tvar each = Highcharts.each;\n\t\n\t\n\t// The Data constructor\n\tvar Data = function (dataOptions, chartOptions) {\n\t\tthis.init(dataOptions, chartOptions);\n\t};\n\t\n\t// Set the prototype properties\n\tHighcharts.extend(Data.prototype, {\n\t\t\n\t/**\n\t * Initialize the Data object with the given options\n\t */\n\tinit: function (options, chartOptions) {\n\t\tthis.options = options;\n\t\tthis.chartOptions = chartOptions;\n\t\tthis.columns = options.columns || this.rowsToColumns(options.rows) || [];\n\n\t\t// No need to parse or interpret anything\n\t\tif (this.columns.length) {\n\t\t\tthis.dataFound();\n\n\t\t// Parse and interpret\n\t\t} else {\n\n\t\t\t// Parse a CSV string if options.csv is given\n\t\t\tthis.parseCSV();\n\t\t\t\n\t\t\t// Parse a HTML table if options.table is given\n\t\t\tthis.parseTable();\n\n\t\t\t// Parse a Google Spreadsheet \n\t\t\tthis.parseGoogleSpreadsheet();\t\n\t\t}\n\n\t},\n\n\t/**\n\t * Get the column distribution. For example, a line series takes a single column for \n\t * Y values. A range series takes two columns for low and high values respectively,\n\t * and an OHLC series takes four columns.\n\t */\n\tgetColumnDistribution: function () {\n\t\tvar chartOptions = this.chartOptions,\n\t\t\tgetValueCount = function (type) {\n\t\t\t\treturn (Highcharts.seriesTypes[type || 'line'].prototype.pointArrayMap || [0]).length;\n\t\t\t},\n\t\t\tglobalType = chartOptions && chartOptions.chart && chartOptions.chart.type,\n\t\t\tindividualCounts = [];\n\n\t\teach((chartOptions && chartOptions.series) || [], function (series) {\n\t\t\tindividualCounts.push(getValueCount(series.type || globalType));\n\t\t});\n\n\t\tthis.valueCount = {\n\t\t\tglobal: getValueCount(globalType),\n\t\t\tindividual: individualCounts\n\t\t};\n\t},\n\n\n\tdataFound: function () {\n\t\t// Interpret the values into right types\n\t\tthis.parseTypes();\n\t\t\n\t\t// Use first row for series names?\n\t\tthis.findHeaderRow();\n\t\t\n\t\t// Handle columns if a handleColumns callback is given\n\t\tthis.parsed();\n\t\t\n\t\t// Complete if a complete callback is given\n\t\tthis.complete();\n\t\t\n\t},\n\t\n\t/**\n\t * Parse a CSV input string\n\t */\n\tparseCSV: function () {\n\t\tvar self = this,\n\t\t\toptions = this.options,\n\t\t\tcsv = options.csv,\n\t\t\tcolumns = this.columns,\n\t\t\tstartRow = options.startRow || 0,\n\t\t\tendRow = options.endRow || Number.MAX_VALUE,\n\t\t\tstartColumn = options.startColumn || 0,\n\t\t\tendColumn = options.endColumn || Number.MAX_VALUE,\n\t\t\tlines,\n\t\t\tactiveRowNo = 0;\n\t\t\t\n\t\tif (csv) {\n\t\t\t\n\t\t\tlines = csv\n\t\t\t\t.replace(/\\r\\n/g, \"\\n\") // Unix\n\t\t\t\t.replace(/\\r/g, \"\\n\") // Mac\n\t\t\t\t.split(options.lineDelimiter || \"\\n\");\n\t\t\t\n\t\t\teach(lines, function (line, rowNo) {\n\t\t\t\tvar trimmed = self.trim(line),\n\t\t\t\t\tisComment = trimmed.indexOf('#') === 0,\n\t\t\t\t\tisBlank = trimmed === '',\n\t\t\t\t\titems;\n\t\t\t\t\n\t\t\t\tif (rowNo >= startRow && rowNo <= endRow && !isComment && !isBlank) {\n\t\t\t\t\titems = line.split(options.itemDelimiter || ',');\n\t\t\t\t\teach(items, function (item, colNo) {\n\t\t\t\t\t\tif (colNo >= startColumn && colNo <= endColumn) {\n\t\t\t\t\t\t\tif (!columns[colNo - startColumn]) {\n\t\t\t\t\t\t\t\tcolumns[colNo - startColumn] = [];\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcolumns[colNo - startColumn][activeRowNo] = item;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tactiveRowNo += 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.dataFound();\n\t\t}\n\t},\n\t\n\t/**\n\t * Parse a HTML table\n\t */\n\tparseTable: function () {\n\t\tvar options = this.options,\n\t\t\ttable = options.table,\n\t\t\tcolumns = this.columns,\n\t\t\tstartRow = options.startRow || 0,\n\t\t\tendRow = options.endRow || Number.MAX_VALUE,\n\t\t\tstartColumn = options.startColumn || 0,\n\t\t\tendColumn = options.endColumn || Number.MAX_VALUE,\n\t\t\tcolNo;\n\t\t\t\n\t\tif (table) {\n\t\t\t\n\t\t\tif (typeof table === 'string') {\n\t\t\t\ttable = document.getElementById(table);\n\t\t\t}\n\t\t\t\n\t\t\teach(table.getElementsByTagName('tr'), function (tr, rowNo) {\n\t\t\t\tcolNo = 0; \n\t\t\t\tif (rowNo >= startRow && rowNo <= endRow) {\n\t\t\t\t\teach(tr.childNodes, function (item) {\n\t\t\t\t\t\tif ((item.tagName === 'TD' || item.tagName === 'TH') && colNo >= startColumn && colNo <= endColumn) {\n\t\t\t\t\t\t\tif (!columns[colNo]) {\n\t\t\t\t\t\t\t\tcolumns[colNo] = [];\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolumns[colNo][rowNo - startRow] = item.innerHTML;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcolNo += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.dataFound(); // continue\n\t\t}\n\t},\n\n\t/**\n\t * TODO: \n\t * - switchRowsAndColumns\n\t */\n\tparseGoogleSpreadsheet: function () {\n\t\tvar self = this,\n\t\t\toptions = this.options,\n\t\t\tgoogleSpreadsheetKey = options.googleSpreadsheetKey,\n\t\t\tcolumns = this.columns,\n\t\t\tstartRow = options.startRow || 0,\n\t\t\tendRow = options.endRow || Number.MAX_VALUE,\n\t\t\tstartColumn = options.startColumn || 0,\n\t\t\tendColumn = options.endColumn || Number.MAX_VALUE,\n\t\t\tgr, // google row\n\t\t\tgc; // google column\n\n\t\tif (googleSpreadsheetKey) {\n\t\t\tjQuery.getJSON('https://spreadsheets.google.com/feeds/cells/' + \n\t\t\t\t  googleSpreadsheetKey + '/' + (options.googleSpreadsheetWorksheet || 'od6') +\n\t\t\t\t\t  '/public/values?alt=json-in-script&callback=?',\n\t\t\t\t\t  function (json) {\n\t\t\t\t\t\n\t\t\t\t// Prepare the data from the spreadsheat\n\t\t\t\tvar cells = json.feed.entry,\n\t\t\t\t\tcell,\n\t\t\t\t\tcellCount = cells.length,\n\t\t\t\t\tcolCount = 0,\n\t\t\t\t\trowCount = 0,\n\t\t\t\t\ti;\n\t\t\t\n\t\t\t\t// First, find the total number of columns and rows that \n\t\t\t\t// are actually filled with data\n\t\t\t\tfor (i = 0; i < cellCount; i++) {\n\t\t\t\t\tcell = cells[i];\n\t\t\t\t\tcolCount = Math.max(colCount, cell.gs$cell.col);\n\t\t\t\t\trowCount = Math.max(rowCount, cell.gs$cell.row);\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// Set up arrays containing the column data\n\t\t\t\tfor (i = 0; i < colCount; i++) {\n\t\t\t\t\tif (i >= startColumn && i <= endColumn) {\n\t\t\t\t\t\t// Create new columns with the length of either end-start or rowCount\n\t\t\t\t\t\tcolumns[i - startColumn] = [];\n\n\t\t\t\t\t\t// Setting the length to avoid jslint warning\n\t\t\t\t\t\tcolumns[i - startColumn].length = Math.min(rowCount, endRow - startRow);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Loop over the cells and assign the value to the right\n\t\t\t\t// place in the column arrays\n\t\t\t\tfor (i = 0; i < cellCount; i++) {\n\t\t\t\t\tcell = cells[i];\n\t\t\t\t\tgr = cell.gs$cell.row - 1; // rows start at 1\n\t\t\t\t\tgc = cell.gs$cell.col - 1; // columns start at 1\n\n\t\t\t\t\t// If both row and col falls inside start and end\n\t\t\t\t\t// set the transposed cell value in the newly created columns\n\t\t\t\t\tif (gc >= startColumn && gc <= endColumn &&\n\t\t\t\t\t\tgr >= startRow && gr <= endRow) {\n\t\t\t\t\t\tcolumns[gc - startColumn][gr - startRow] = cell.content.$t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tself.dataFound();\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * Find the header row. For now, we just check whether the first row contains\n\t * numbers or strings. Later we could loop down and find the first row with \n\t * numbers.\n\t */\n\tfindHeaderRow: function () {\n\t\tvar headerRow = 0;\n\t\teach(this.columns, function (column) {\n\t\t\tif (typeof column[0] !== 'string') {\n\t\t\t\theaderRow = null;\n\t\t\t}\n\t\t});\n\t\tthis.headerRow = 0;\t\t\t\n\t},\n\t\n\t/**\n\t * Trim a string from whitespace\n\t */\n\ttrim: function (str) {\n\t\treturn typeof str === 'string' ? str.replace(/^\\s+|\\s+$/g, '') : str;\n\t},\n\t\n\t/**\n\t * Parse numeric cells in to number types and date types in to true dates.\n\t * @param {Object} columns\n\t */\n\tparseTypes: function () {\n\t\tvar columns = this.columns,\n\t\t\tcol = columns.length, \n\t\t\trow,\n\t\t\tval,\n\t\t\tfloatVal,\n\t\t\ttrimVal,\n\t\t\tdateVal;\n\t\t\t\n\t\twhile (col--) {\n\t\t\trow = columns[col].length;\n\t\t\twhile (row--) {\n\t\t\t\tval = columns[col][row];\n\t\t\t\tfloatVal = parseFloat(val);\n\t\t\t\ttrimVal = this.trim(val);\n\n\t\t\t\t/*jslint eqeq: true*/\n\t\t\t\tif (trimVal == floatVal) { // is numeric\n\t\t\t\t/*jslint eqeq: false*/\n\t\t\t\t\tcolumns[col][row] = floatVal;\n\t\t\t\t\t\n\t\t\t\t\t// If the number is greater than milliseconds in a year, assume datetime\n\t\t\t\t\tif (floatVal > 365 * 24 * 3600 * 1000) {\n\t\t\t\t\t\tcolumns[col].isDatetime = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumns[col].isNumeric = true;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t} else { // string, continue to determine if it is a date string or really a string\n\t\t\t\t\tdateVal = this.parseDate(val);\n\t\t\t\t\t\n\t\t\t\t\tif (col === 0 && typeof dateVal === 'number' && !isNaN(dateVal)) { // is date\n\t\t\t\t\t\tcolumns[col][row] = dateVal;\n\t\t\t\t\t\tcolumns[col].isDatetime = true;\n\t\t\t\t\t\n\t\t\t\t\t} else { // string\n\t\t\t\t\t\tcolumns[col][row] = trimVal === '' ? null : trimVal;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t},\n\t//*\n\tdateFormats: {\n\t\t'YYYY-mm-dd': {\n\t\t\tregex: '^([0-9]{4})-([0-9]{2})-([0-9]{2})$',\n\t\t\tparser: function (match) {\n\t\t\t\treturn Date.UTC(+match[1], match[2] - 1, +match[3]);\n\t\t\t}\n\t\t}\n\t},\n\t// */\n\t/**\n\t * Parse a date and return it as a number. Overridable through options.parseDate.\n\t */\n\tparseDate: function (val) {\n\t\tvar parseDate = this.options.parseDate,\n\t\t\tret,\n\t\t\tkey,\n\t\t\tformat,\n\t\t\tmatch;\n\n\t\tif (parseDate) {\n\t\t\tret = parseDate(val);\n\t\t}\n\t\t\t\n\t\tif (typeof val === 'string') {\n\t\t\tfor (key in this.dateFormats) {\n\t\t\t\tformat = this.dateFormats[key];\n\t\t\t\tmatch = val.match(format.regex);\n\t\t\t\tif (match) {\n\t\t\t\t\tret = format.parser(match);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t},\n\t\n\t/**\n\t * Reorganize rows into columns\n\t */\n\trowsToColumns: function (rows) {\n\t\tvar row,\n\t\t\trowsLength,\n\t\t\tcol,\n\t\t\tcolsLength,\n\t\t\tcolumns;\n\n\t\tif (rows) {\n\t\t\tcolumns = [];\n\t\t\trowsLength = rows.length;\n\t\t\tfor (row = 0; row < rowsLength; row++) {\n\t\t\t\tcolsLength = rows[row].length;\n\t\t\t\tfor (col = 0; col < colsLength; col++) {\n\t\t\t\t\tif (!columns[col]) {\n\t\t\t\t\t\tcolumns[col] = [];\n\t\t\t\t\t}\n\t\t\t\t\tcolumns[col][row] = rows[row][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn columns;\n\t},\n\t\n\t/**\n\t * A hook for working directly on the parsed columns\n\t */\n\tparsed: function () {\n\t\tif (this.options.parsed) {\n\t\t\tthis.options.parsed.call(this, this.columns);\n\t\t}\n\t},\n\t\n\t/**\n\t * If a complete callback function is provided in the options, interpret the \n\t * columns into a Highcharts options object.\n\t */\n\tcomplete: function () {\n\t\t\n\t\tvar columns = this.columns,\n\t\t\tfirstCol,\n\t\t\ttype,\n\t\t\toptions = this.options,\n\t\t\tvalueCount,\n\t\t\tseries,\n\t\t\tdata,\n\t\t\ti,\n\t\t\tj,\n\t\t\tseriesIndex;\n\t\t\t\n\t\t\n\t\tif (options.complete) {\n\n\t\t\tthis.getColumnDistribution();\n\t\t\t\n\t\t\t// Use first column for X data or categories?\n\t\t\tif (columns.length > 1) {\n\t\t\t\tfirstCol = columns.shift();\n\t\t\t\tif (this.headerRow === 0) {\n\t\t\t\t\tfirstCol.shift(); // remove the first cell\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (firstCol.isDatetime) {\n\t\t\t\t\ttype = 'datetime';\n\t\t\t\t} else if (!firstCol.isNumeric) {\n\t\t\t\t\ttype = 'category';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get the names and shift the top row\n\t\t\tfor (i = 0; i < columns.length; i++) {\n\t\t\t\tif (this.headerRow === 0) {\n\t\t\t\t\tcolumns[i].name = columns[i].shift();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Use the next columns for series\n\t\t\tseries = [];\n\t\t\tfor (i = 0, seriesIndex = 0; i < columns.length; seriesIndex++) {\n\n\t\t\t\t// This series' value count\n\t\t\t\tvalueCount = Highcharts.pick(this.valueCount.individual[seriesIndex], this.valueCount.global);\n\t\t\t\t\n\t\t\t\t// Iterate down the cells of each column and add data to the series\n\t\t\t\tdata = [];\n\t\t\t\tfor (j = 0; j < columns[i].length; j++) {\n\t\t\t\t\tdata[j] = [\n\t\t\t\t\t\tfirstCol[j], \n\t\t\t\t\t\tcolumns[i][j] !== undefined ? columns[i][j] : null\n\t\t\t\t\t];\n\t\t\t\t\tif (valueCount > 1) {\n\t\t\t\t\t\tdata[j].push(columns[i + 1][j] !== undefined ? columns[i + 1][j] : null);\n\t\t\t\t\t}\n\t\t\t\t\tif (valueCount > 2) {\n\t\t\t\t\t\tdata[j].push(columns[i + 2][j] !== undefined ? columns[i + 2][j] : null);\n\t\t\t\t\t}\n\t\t\t\t\tif (valueCount > 3) {\n\t\t\t\t\t\tdata[j].push(columns[i + 3][j] !== undefined ? columns[i + 3][j] : null);\n\t\t\t\t\t}\n\t\t\t\t\tif (valueCount > 4) {\n\t\t\t\t\t\tdata[j].push(columns[i + 4][j] !== undefined ? columns[i + 4][j] : null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add the series\n\t\t\t\tseries[seriesIndex] = {\n\t\t\t\t\tname: columns[i].name,\n\t\t\t\t\tdata: data\n\t\t\t\t};\n\n\t\t\t\ti += valueCount;\n\t\t\t}\n\t\t\t\n\t\t\t// Do the callback\n\t\t\toptions.complete({\n\t\t\t\txAxis: {\n\t\t\t\t\ttype: type\n\t\t\t\t},\n\t\t\t\tseries: series\n\t\t\t});\n\t\t}\n\t}\n\t});\n\t\n\t// Register the Data prototype and data function on Highcharts\n\tHighcharts.Data = Data;\n\tHighcharts.data = function (options, chartOptions) {\n\t\treturn new Data(options, chartOptions);\n\t};\n\n\t// Extend Chart.init so that the Chart constructor accepts a new configuration\n\t// option group, data.\n\tHighcharts.wrap(Highcharts.Chart.prototype, 'init', function (proceed, userOptions, callback) {\n\t\tvar chart = this;\n\n\t\tif (userOptions && userOptions.data) {\n\t\t\tHighcharts.data(Highcharts.extend(userOptions.data, {\n\t\t\t\tcomplete: function (dataOptions) {\n\t\t\t\t\t\n\t\t\t\t\t// Merge series configs\n\t\t\t\t\tif (userOptions.series) {\n\t\t\t\t\t\teach(userOptions.series, function (series, i) {\n\t\t\t\t\t\t\tuserOptions.series[i] = Highcharts.merge(series, dataOptions.series[i]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do the merge\n\t\t\t\t\tuserOptions = Highcharts.merge(dataOptions, userOptions);\n\n\t\t\t\t\tproceed.call(chart, userOptions, callback);\n\t\t\t\t}\n\t\t\t}), userOptions);\n\t\t} else {\n\t\t\tproceed.call(chart, userOptions, callback);\n\t\t}\n\t});\n\n}(Highcharts));\n"]}