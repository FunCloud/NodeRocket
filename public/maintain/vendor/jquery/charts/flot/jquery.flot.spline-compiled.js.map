{"version":3,"sources":["jquery.flot.spline.js"],"names":[],"mappings":"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","file":"jquery.flot.spline-compiled.js","sourcesContent":["/**\r\n * Flot plugin that provides spline interpolation for line graphs\r\n * author: Alex Bardas < alex.bardas@gmail.com >\r\n * modified by: Avi Kohn https://github.com/AMKohn\r\n * based on the spline interpolation described at:\r\n *\t\t http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n *\r\n * Example usage: (add in plot options series object)\r\n *\t\tfor linespline:\r\n *\t\t\tseries: {\r\n *\t\t\t\t...\r\n *\t\t\t\tlines: {\r\n *\t\t\t\t\tshow: false\r\n *\t\t\t\t},\r\n *\t\t\t\tsplines: {\r\n *\t\t\t\t\tshow: true,\r\n *\t\t\t\t\ttension: x, (float between 0 and 1, defaults to 0.5),\r\n *\t\t\t\t\tlineWidth: y (number, defaults to 2),\r\n *\t\t\t\t\tfill: z (float between 0 .. 1 or false, as in flot documentation)\r\n *\t\t\t\t},\r\n *\t\t\t\t...\r\n *\t\t\t}\r\n *\t\tareaspline:\r\n *\t\t\tseries: {\r\n *\t\t\t\t...\r\n *\t\t\t\tlines: {\r\n *\t\t\t\t\tshow: true,\r\n *\t\t\t\t\tlineWidth: 0, (line drawing will not execute)\r\n *\t\t\t\t\tfill: x, (float between 0 .. 1, as in flot documentation)\r\n *\t\t\t\t\t...\r\n *\t\t\t\t},\r\n *\t\t\t\tsplines: {\r\n *\t\t\t\t\tshow: true,\r\n *\t\t\t\t\ttension: 0.5 (float between 0 and 1)\r\n *\t\t\t\t},\r\n *\t\t\t\t...\r\n *\t\t\t}\r\n *\r\n */\r\n\r\n(function($) {\r\n\t'use strict'\r\n\r\n\t/**\r\n\t * @param {Number} x0, y0, x1, y1: coordinates of the end (knot) points of the segment\r\n\t * @param {Number} x2, y2: the next knot (not connected, but needed to calculate p2)\r\n\t * @param {Number} tension: control how far the control points spread\r\n\t * @return {Array}: p1 -> control point, from x1 back toward x0\r\n\t * \t\t\t\t\tp2 -> the next control point, returned to become the next segment's p1\r\n\t *\r\n\t * @api private\r\n\t */\r\n\tfunction getControlPoints(x0, y0, x1, y1, x2, y2, tension) {\r\n\r\n\t\tvar pow = Math.pow,\r\n\t\t\tsqrt = Math.sqrt,\r\n\t\t\td01, d12, fa, fb, p1x, p1y, p2x, p2y;\r\n\r\n\t\t//  Scaling factors: distances from this knot to the previous and following knots.\r\n\t\td01 = sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));\r\n\t\td12 = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\r\n\r\n\t\tfa = tension * d01 / (d01 + d12);\r\n\t\tfb = tension - fa;\r\n\r\n\t\tp1x = x1 + fa * (x0 - x2);\r\n\t\tp1y = y1 + fa * (y0 - y2);\r\n\r\n\t\tp2x = x1 - fb * (x0 - x2);\r\n\t\tp2y = y1 - fb * (y0 - y2);\r\n\r\n\t\treturn [p1x, p1y, p2x, p2y];\r\n\t}\r\n\r\n\tvar line = [];\r\n\r\n\tfunction drawLine(points, ctx, height, fill, seriesColor) {\r\n\t\tvar c = $.color.parse(seriesColor);\r\n\r\n\t\tc.a = typeof fill == \"number\" ? fill : .3;\r\n\t\tc.normalize();\r\n\t\tc = c.toString();\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(points[0][0], points[0][1]);\r\n\r\n\t\tvar plength = points.length;\r\n\r\n\t\tfor (var i = 0; i < plength; i++) {\r\n\t\t\tctx[points[i][3]].apply(ctx, points[i][2]);\r\n\t\t}\r\n\r\n\t\tctx.stroke();\r\n\r\n\t\tctx.lineWidth = 0;\r\n\t\tctx.lineTo(points[plength - 1][0], height);\r\n\t\tctx.lineTo(points[0][0], height);\r\n\r\n\t\tctx.closePath();\r\n\t\t\r\n\t\tif (fill !== false) {\r\n\t\t\tctx.fillStyle = c;\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object} ctx: canvas context\r\n\t * @param {String} type: accepted strings: 'bezier' or 'quadratic' (defaults to quadratic)\r\n\t * @param {Array} points: 2 points for which to draw the interpolation\r\n\t * @param {Array} cpoints: control points for those segment points\r\n\t *\r\n\t * @api private\r\n\t */\r\n\tfunction queue(ctx, type, points, cpoints) {\r\n\t\tif (type === void 0 || (type !== 'bezier' && type !== 'quadratic')) {\r\n\t\t\ttype = 'quadratic';\r\n\t\t}\r\n\t\ttype = type + 'CurveTo';\r\n\r\n\t\tif (line.length == 0) line.push([points[0], points[1], cpoints.concat(points.slice(2)), type]);\r\n\t\telse if (type == \"quadraticCurveTo\" && points.length == 2) {\r\n\t\t\tcpoints = cpoints.slice(0, 2).concat(points);\r\n\r\n\t\t\tline.push([points[0], points[1], cpoints, type]);\r\n\t\t}\r\n\t\telse line.push([points[2], points[3], cpoints.concat(points.slice(2)), type]);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object} plot\r\n\t * @param {Object} ctx: canvas context\r\n\t * @param {Object} series\r\n\t *\r\n\t * @api private\r\n\t */\r\n\r\n\tfunction drawSpline(plot, ctx, series) {\r\n\t\t// Not interested if spline is not requested\r\n\t\tif (series.splines.show !== true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar cp = [],\r\n\t\t\t// array of control points\r\n\t\t\ttension = series.splines.tension || 0.5,\r\n\t\t\tidx, x, y, points = series.datapoints.points,\r\n\t\t\tps = series.datapoints.pointsize,\r\n\t\t\tplotOffset = plot.getPlotOffset(),\r\n\t\t\tlen = points.length,\r\n\t\t\tpts = [];\r\n\r\n\t\tline = [];\r\n\r\n\t\t// Cannot display a linespline/areaspline if there are less than 3 points\r\n\t\tif (len / ps < 4) {\r\n\t\t\t$.extend(series.lines, series.splines);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (idx = 0; idx < len; idx += ps) {\r\n\t\t\tx = points[idx];\r\n\t\t\ty = points[idx + 1];\r\n\t\t\tif (x == null || x < series.xaxis.min || x > series.xaxis.max || y < series.yaxis.min || y > series.yaxis.max) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tpts.push(series.xaxis.p2c(x) + plotOffset.left, series.yaxis.p2c(y) + plotOffset.top);\r\n\t\t}\r\n\r\n\t\tlen = pts.length;\r\n\r\n\t\t// Draw an open curve, not connected at the ends\r\n\t\tfor (idx = 0; idx < len - 2; idx += 2) {\r\n\t\t\tcp = cp.concat(getControlPoints.apply(this, pts.slice(idx, idx + 6).concat([tension])));\r\n\t\t}\r\n\r\n\t\tctx.save();\r\n\t\tctx.strokeStyle = series.color;\r\n\t\tctx.lineWidth = series.splines.lineWidth;\r\n\r\n\t\tqueue(ctx, 'quadratic', pts.slice(0, 4), cp.slice(0, 2));\r\n\r\n\t\tfor (idx = 2; idx < len - 3; idx += 2) {\r\n\t\t\tqueue(ctx, 'bezier', pts.slice(idx, idx + 4), cp.slice(2 * idx - 2, 2 * idx + 2));\r\n\t\t}\r\n\r\n\t\tqueue(ctx, 'quadratic', pts.slice(len - 2, len), [cp[2 * len - 10], cp[2 * len - 9], pts[len - 4], pts[len - 3]]);\r\n\r\n\t\tdrawLine(line, ctx, plot.height() + 10, series.splines.fill, series.color);\r\n\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t$.plot.plugins.push({\r\n\t\tinit: function(plot) {\r\n\t\t\tplot.hooks.drawSeries.push(drawSpline);\r\n\t\t},\r\n\t\toptions: {\r\n\t\t\tseries: {\r\n\t\t\t\tsplines: {\r\n\t\t\t\t\tshow: false,\r\n\t\t\t\t\tlineWidth: 2,\r\n\t\t\t\t\ttension: 0.5,\r\n\t\t\t\t\tfill: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tname: 'spline',\r\n\t\tversion: '0.8.2'\r\n\t});\r\n})(jQuery);\r\n"]}