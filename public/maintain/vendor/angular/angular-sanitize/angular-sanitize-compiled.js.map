{"version":3,"sources":["angular-sanitize.js"],"names":[],"mappings":"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","file":"angular-sanitize-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.3.0\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/*\n * HTML Parser By Misko Hevery (misko@hevery.com)\n * based on:  HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * // Use like so:\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n */\n\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string, however, since our parser is more strict than a typical browser\n *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n *   browser, won't make it through the sanitizer.\n *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.\n *\n * @param {string} html Html input.\n * @returns {string} Sanitized html.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\nfunction $SanitizeProvider() {\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar START_TAG_REGEXP =\n       /^<((?:[a-zA-Z])[\\w:-]*)((?:\\s+[\\w:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)\\s*(>?)/,\n  END_TAG_REGEXP = /^<\\/\\s*([\\w:-]+)[^>]*>/,\n  ATTR_REGEXP = /([\\w:-]+)(?:\\s*=\\s*(?:(?:\"((?:[^\"])*)\")|(?:'((?:[^'])*)')|([^>\\s]+)))?/g,\n  BEGIN_TAG_REGEXP = /^</,\n  BEGING_END_TAGE_REGEXP = /^<\\//,\n  COMMENT_REGEXP = /<!--(.*?)-->/g,\n  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,\n  CDATA_REGEXP = /<!\\[CDATA\\[(.*?)]]>/g,\n  SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = makeMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = makeMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = makeMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n\n// Special Elements (can contain anything)\nvar specialElements = makeMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = makeMap(\"background,cite,href,longdesc,src,usemap\");\nvar validAttrs = angular.extend({}, uriAttrs, makeMap(\n    'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,'+\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,'+\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,'+\n    'scope,scrolling,shape,size,span,start,summary,target,title,type,'+\n    'valign,value,vspace,width'));\n\nfunction makeMap(str) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) obj[items[i]] = true;\n  return obj;\n}\n\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser( html, handler ) {\n  if (typeof html !== 'string') {\n    if (html === null || typeof html === 'undefined') {\n      html = '';\n    } else {\n      html = '' + html;\n    }\n  }\n  var index, chars, match, stack = [], last = html, text;\n  stack.last = function() { return stack[ stack.length - 1 ]; };\n\n  while ( html ) {\n    text = '';\n    chars = true;\n\n    // Make sure we're not in a script or style element\n    if ( !stack.last() || !specialElements[ stack.last() ] ) {\n\n      // Comment\n      if ( html.indexOf(\"<!--\") === 0 ) {\n        // comments containing -- are not allowed unless they terminate the comment\n        index = html.indexOf(\"--\", 4);\n\n        if ( index >= 0 && html.lastIndexOf(\"-->\", index) === index) {\n          if (handler.comment) handler.comment( html.substring( 4, index ) );\n          html = html.substring( index + 3 );\n          chars = false;\n        }\n      // DOCTYPE\n      } else if ( DOCTYPE_REGEXP.test(html) ) {\n        match = html.match( DOCTYPE_REGEXP );\n\n        if ( match ) {\n          html = html.replace( match[0], '');\n          chars = false;\n        }\n      // end tag\n      } else if ( BEGING_END_TAGE_REGEXP.test(html) ) {\n        match = html.match( END_TAG_REGEXP );\n\n        if ( match ) {\n          html = html.substring( match[0].length );\n          match[0].replace( END_TAG_REGEXP, parseEndTag );\n          chars = false;\n        }\n\n      // start tag\n      } else if ( BEGIN_TAG_REGEXP.test(html) ) {\n        match = html.match( START_TAG_REGEXP );\n\n        if ( match ) {\n          // We only have a valid start-tag if there is a '>'.\n          if ( match[4] ) {\n            html = html.substring( match[0].length );\n            match[0].replace( START_TAG_REGEXP, parseStartTag );\n          }\n          chars = false;\n        } else {\n          // no ending tag found --- this piece should be encoded as an entity.\n          text += '<';\n          html = html.substring(1);\n        }\n      }\n\n      if ( chars ) {\n        index = html.indexOf(\"<\");\n\n        text += index < 0 ? html : html.substring( 0, index );\n        html = index < 0 ? \"\" : html.substring( index );\n\n        if (handler.chars) handler.chars( decodeEntities(text) );\n      }\n\n    } else {\n      html = html.replace(new RegExp(\"(.*)<\\\\s*\\\\/\\\\s*\" + stack.last() + \"[^>]*>\", 'i'),\n        function(all, text){\n          text = text.replace(COMMENT_REGEXP, \"$1\").replace(CDATA_REGEXP, \"$1\");\n\n          if (handler.chars) handler.chars( decodeEntities(text) );\n\n          return \"\";\n      });\n\n      parseEndTag( \"\", stack.last() );\n    }\n\n    if ( html == last ) {\n      throw $sanitizeMinErr('badparse', \"The sanitizer was unable to parse the following block \" +\n                                        \"of html: {0}\", html);\n    }\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function parseStartTag( tag, tagName, rest, unary ) {\n    tagName = angular.lowercase(tagName);\n    if ( blockElements[ tagName ] ) {\n      while ( stack.last() && inlineElements[ stack.last() ] ) {\n        parseEndTag( \"\", stack.last() );\n      }\n    }\n\n    if ( optionalEndTagElements[ tagName ] && stack.last() == tagName ) {\n      parseEndTag( \"\", tagName );\n    }\n\n    unary = voidElements[ tagName ] || !!unary;\n\n    if ( !unary )\n      stack.push( tagName );\n\n    var attrs = {};\n\n    rest.replace(ATTR_REGEXP,\n      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n        var value = doubleQuotedValue\n          || singleQuotedValue\n          || unquotedValue\n          || '';\n\n        attrs[name] = decodeEntities(value);\n    });\n    if (handler.start) handler.start( tagName, attrs, unary );\n  }\n\n  function parseEndTag( tag, tagName ) {\n    var pos = 0, i;\n    tagName = angular.lowercase(tagName);\n    if ( tagName )\n      // Find the closest opened tag of the same type\n      for ( pos = stack.length - 1; pos >= 0; pos-- )\n        if ( stack[ pos ] == tagName )\n          break;\n\n    if ( pos >= 0 ) {\n      // Close all the open elements, up the stack\n      for ( i = stack.length - 1; i >= pos; i-- )\n        if (handler.end) handler.end( stack[ i ] );\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n}\n\nvar hiddenPre=document.createElement(\"pre\");\nvar spaceRe = /^(\\s*)([\\s\\S]*?)(\\s*)$/;\n/**\n * decodes all entities into regular string\n * @param value\n * @returns {string} A string with decoded entities.\n */\nfunction decodeEntities(value) {\n  if (!value) { return ''; }\n\n  // Note: IE8 does not preserve spaces at the start/end of innerHTML\n  // so we must capture them and reattach them afterward\n  var parts = spaceRe.exec(value);\n  var spaceBefore = parts[1];\n  var spaceAfter = parts[3];\n  var content = parts[2];\n  if (content) {\n    hiddenPre.innerHTML=content.replace(/</g,\"&lt;\");\n    // innerText depends on styling as it doesn't display hidden elements.\n    // Therefore, it's better to use textContent not to cause unnecessary\n    // reflows. However, IE<9 don't support textContent so the innerText\n    // fallback is necessary.\n    content = 'textContent' in hiddenPre ?\n      hiddenPre.textContent : hiddenPre.innerText;\n  }\n  return spaceBefore + content + spaceAfter;\n}\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function (value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value){\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.jain('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator){\n  var ignore = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs, unary){\n      tag = angular.lowercase(tag);\n      if (!ignore && specialElements[tag]) {\n        ignore = tag;\n      }\n      if (!ignore && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key){\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out(unary ? '/>' : '>');\n      }\n    },\n    end: function(tag){\n        tag = angular.lowercase(tag);\n        if (!ignore && validElements[tag] === true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignore) {\n          ignore = false;\n        }\n      },\n    chars: function(chars){\n        if (!ignore) {\n          out(encodeEntities(chars));\n        }\n      }\n  };\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.\n * @returns {string} Html-linkified text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('linkyExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.snippet =\n               'Pretty text with some links:\\n'+\n               'http://angularjs.org/,\\n'+\n               'mailto:us@somewhere.org,\\n'+\n               'another@somewhere.org,\\n'+\n               'and one more: ftp://127.0.0.1/.';\n             $scope.snippetWithTarget = 'http://angularjs.org/';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Filter</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithTarget | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"]/,\n      MAILTO_REGEXP = /^mailto:/;\n\n  return function(text, target) {\n    if (!text) return text;\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/mailto then assume mailto\n      if (match[2] == match[3]) url = 'mailto:' + url;\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      html.push('<a ');\n      if (angular.isDefined(target)) {\n        html.push('target=\"');\n        html.push(target);\n        html.push('\" ');\n      }\n      html.push('href=\"');\n      html.push(url);\n      html.push('\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n"]}