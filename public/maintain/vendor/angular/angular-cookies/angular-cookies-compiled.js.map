{"version":3,"sources":["angular-cookies.js"],"names":[],"mappings":";;;;;AAKA,CAAC,UAAS,MAAT,EAAiB,OAAjB,EAA0B,SAA1B,EAAqC;AAAC;;;;;;;;;;;;;;;;;;AAmBvC,UAAQ,MAAR,CAAe,WAAf,EAA4B,CAAC,IAAD,CAA5B;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG,SA1BH,CA0BW,UA1BX,EA0BuB,CAAC,YAAD,EAAe,UAAf,EAA2B,UAAU,UAAV,EAAsB,QAAtB,EAAgC;AAC5E,QAAI,UAAU,EAAd;AAAA,QACI,cAAc,EADlB;AAAA,QAEI,kBAFJ;AAAA,QAGI,UAAU,KAHd;AAAA,QAII,OAAO,QAAQ,IAJnB;AAAA,QAKI,cAAc,QAAQ,WAL1B;;;AAQA,aAAS,SAAT,CAAmB,YAAW;AAC5B,UAAI,iBAAiB,SAAS,OAAT,EAArB;AACA,UAAI,sBAAsB,cAA1B,EAA0C;;AACxC,6BAAqB,cAArB;AACA,aAAK,cAAL,EAAqB,WAArB;AACA,aAAK,cAAL,EAAqB,OAArB;AACA,YAAI,OAAJ,EAAa,WAAW,MAAX;AACd;AACF,KARD;;AAUA,cAAU,IAAV;;;;;AAKA,eAAW,MAAX,CAAkB,IAAlB;;AAEA,WAAO,OAAP;;;;;;AAOA,aAAS,IAAT,GAAgB;AACd,UAAI,IAAJ,EACI,KADJ,EAEI,cAFJ,EAGI,OAHJ;;;AAMA,WAAK,IAAL,IAAa,WAAb,EAA0B;AACxB,YAAI,YAAY,QAAQ,IAAR,CAAZ,CAAJ,EAAgC;AAC9B,mBAAS,OAAT,CAAiB,IAAjB,EAAuB,SAAvB;AACD;AACF;;;AAGD,WAAI,IAAJ,IAAY,OAAZ,EAAqB;AACnB,gBAAQ,QAAQ,IAAR,CAAR;AACA,YAAI,CAAC,QAAQ,QAAR,CAAiB,KAAjB,CAAL,EAA8B;AAC5B,kBAAQ,KAAK,KAAb;AACA,kBAAQ,IAAR,IAAgB,KAAhB;AACD;AACD,YAAI,UAAU,YAAY,IAAZ,CAAd,EAAiC;AAC/B,mBAAS,OAAT,CAAiB,IAAjB,EAAuB,KAAvB;AACA,oBAAU,IAAV;AACD;AACF;;;AAGD,UAAI,OAAJ,EAAY;AACV,kBAAU,KAAV;AACA,yBAAiB,SAAS,OAAT,EAAjB;;AAEA,aAAK,IAAL,IAAa,OAAb,EAAsB;AACpB,cAAI,QAAQ,IAAR,MAAkB,eAAe,IAAf,CAAtB,EAA4C;;AAE1C,gBAAI,YAAY,eAAe,IAAf,CAAZ,CAAJ,EAAuC;AACrC,qBAAO,QAAQ,IAAR,CAAP;AACD,aAFD,MAEO;AACL,sBAAQ,IAAR,IAAgB,eAAe,IAAf,CAAhB;AACD;AACD,sBAAU,IAAV;AACD;AACF;AACF;AACF;AACF,GA7EkB,CA1BvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIG,SApIH,CAoIW,cApIX,EAoI2B,CAAC,UAAD,EAAa,UAAS,QAAT,EAAmB;;AAErD,WAAO;;;;;;;;;;;AAWL,WAAK,UAAS,GAAT,EAAc;AACjB,YAAI,QAAQ,SAAS,GAAT,CAAZ;AACA,eAAO,QAAQ,QAAQ,QAAR,CAAiB,KAAjB,CAAR,GAAkC,KAAzC;AACD,OAdI;;;;;;;;;;;;AA0BL,WAAK,UAAS,GAAT,EAAc,KAAd,EAAqB;AACxB,iBAAS,GAAT,IAAgB,QAAQ,MAAR,CAAe,KAAf,CAAhB;AACD,OA5BI;;;;;;;;;;;AAuCL,cAAQ,UAAS,GAAT,EAAc;AACpB,eAAO,SAAS,GAAT,CAAP;AACD;AAzCI,KAAP;AA4CD,GA9CsB,CApI3B;AAqLC,CAxMD,EAwMG,MAxMH,EAwMW,OAAO,OAxMlB","file":"angular-cookies-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.2.24\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngCookies\n * @description\n *\n * # ngCookies\n *\n * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\n *\n *\n * <div doc-module-components=\"ngCookies\"></div>\n *\n * See {@link ngCookies.$cookies `$cookies`} and\n * {@link ngCookies.$cookieStore `$cookieStore`} for usage.\n */\n\n\nangular.module('ngCookies', ['ng']).\n  /**\n   * @ngdoc service\n   * @name $cookies\n   *\n   * @description\n   * Provides read/write access to browser's cookies.\n   *\n   * Only a simple Object is exposed and by adding or removing properties to/from this object, new\n   * cookies are created/deleted at the end of current $eval.\n   * The object's properties can only be strings.\n   *\n   * Requires the {@link ngCookies `ngCookies`} module to be installed.\n   *\n   * @example\n   *\n   * ```js\n   * angular.module('cookiesExample', ['ngCookies'])\n   *   .controller('ExampleController', ['$cookies', function($cookies) {\n   *     // Retrieving a cookie\n   *     var favoriteCookie = $cookies.myFavorite;\n   *     // Setting a cookie\n   *     $cookies.myFavorite = 'oatmeal';\n   *   }]);\n   * ```\n   */\n   factory('$cookies', ['$rootScope', '$browser', function ($rootScope, $browser) {\n      var cookies = {},\n          lastCookies = {},\n          lastBrowserCookies,\n          runEval = false,\n          copy = angular.copy,\n          isUndefined = angular.isUndefined;\n\n      //creates a poller fn that copies all cookies from the $browser to service & inits the service\n      $browser.addPollFn(function() {\n        var currentCookies = $browser.cookies();\n        if (lastBrowserCookies != currentCookies) { //relies on browser.cookies() impl\n          lastBrowserCookies = currentCookies;\n          copy(currentCookies, lastCookies);\n          copy(currentCookies, cookies);\n          if (runEval) $rootScope.$apply();\n        }\n      })();\n\n      runEval = true;\n\n      //at the end of each eval, push cookies\n      //TODO: this should happen before the \"delayed\" watches fire, because if some cookies are not\n      //      strings or browser refuses to store some cookies, we update the model in the push fn.\n      $rootScope.$watch(push);\n\n      return cookies;\n\n\n      /**\n       * Pushes all the cookies from the service to the browser and verifies if all cookies were\n       * stored.\n       */\n      function push() {\n        var name,\n            value,\n            browserCookies,\n            updated;\n\n        //delete any cookies deleted in $cookies\n        for (name in lastCookies) {\n          if (isUndefined(cookies[name])) {\n            $browser.cookies(name, undefined);\n          }\n        }\n\n        //update all cookies updated in $cookies\n        for(name in cookies) {\n          value = cookies[name];\n          if (!angular.isString(value)) {\n            value = '' + value;\n            cookies[name] = value;\n          }\n          if (value !== lastCookies[name]) {\n            $browser.cookies(name, value);\n            updated = true;\n          }\n        }\n\n        //verify what was actually stored\n        if (updated){\n          updated = false;\n          browserCookies = $browser.cookies();\n\n          for (name in cookies) {\n            if (cookies[name] !== browserCookies[name]) {\n              //delete or reset all cookies that the browser dropped from $cookies\n              if (isUndefined(browserCookies[name])) {\n                delete cookies[name];\n              } else {\n                cookies[name] = browserCookies[name];\n              }\n              updated = true;\n            }\n          }\n        }\n      }\n    }]).\n\n\n  /**\n   * @ngdoc service\n   * @name $cookieStore\n   * @requires $cookies\n   *\n   * @description\n   * Provides a key-value (string-object) storage, that is backed by session cookies.\n   * Objects put or retrieved from this storage are automatically serialized or\n   * deserialized by angular's toJson/fromJson.\n   *\n   * Requires the {@link ngCookies `ngCookies`} module to be installed.\n   *\n   * @example\n   *\n   * ```js\n   * angular.module('cookieStoreExample', ['ngCookies'])\n   *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {\n   *     // Put cookie\n   *     $cookieStore.put('myFavorite','oatmeal');\n   *     // Get cookie\n   *     var favoriteCookie = $cookieStore.get('myFavorite');\n   *     // Removing a cookie\n   *     $cookieStore.remove('myFavorite');\n   *   }]);\n   * ```\n   */\n   factory('$cookieStore', ['$cookies', function($cookies) {\n\n      return {\n        /**\n         * @ngdoc method\n         * @name $cookieStore#get\n         *\n         * @description\n         * Returns the value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {Object} Deserialized cookie value.\n         */\n        get: function(key) {\n          var value = $cookies[key];\n          return value ? angular.fromJson(value) : value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookieStore#put\n         *\n         * @description\n         * Sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {Object} value Value to be stored.\n         */\n        put: function(key, value) {\n          $cookies[key] = angular.toJson(value);\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookieStore#remove\n         *\n         * @description\n         * Remove given cookie\n         *\n         * @param {string} key Id of the key-value pair to delete.\n         */\n        remove: function(key) {\n          delete $cookies[key];\n        }\n      };\n\n    }]);\n\n\n})(window, window.angular);\n"]}