{"version":3,"sources":["angular-resource.js"],"names":[],"mappings":"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","file":"angular-resource-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.2.25\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\nvar $resourceMinErr = angular.$$minErr('$resource');\n\n// Helper functions and regex to lookup a dotted path on an object\n// stopping at undefined/null.  The path must be composed of ASCII\n// identifiers (just like $parse)\nvar MEMBER_NAME_REGEX = /^(\\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;\n\nfunction isValidDottedPath(path) {\n  return (path != null && path !== '' && path !== 'hasOwnProperty' &&\n      MEMBER_NAME_REGEX.test('.' + path));\n}\n\nfunction lookupDottedPath(obj, path) {\n  if (!isValidDottedPath(path)) {\n    throw $resourceMinErr('badmember', 'Dotted member path \"@{0}\" is invalid.', path);\n  }\n  var keys = path.split('.');\n  for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {\n    var key = keys[i];\n    obj = (obj !== null) ? obj[key] : undefined;\n  }\n  return obj;\n}\n\n/**\n * Create a shallow copy of an object and clear other fields from the destination\n */\nfunction shallowClearAndCopy(src, dst) {\n  dst = dst || {};\n\n  angular.forEach(dst, function(value, key){\n    delete dst[key];\n  });\n\n  for (var key in src) {\n    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n/**\n * @ngdoc module\n * @name ngResource\n * @description\n *\n * # ngResource\n *\n * The `ngResource` module provides interaction support with RESTful services\n * via the $resource service.\n *\n *\n * <div doc-module-components=\"ngResource\"></div>\n *\n * See {@link ngResource.$resource `$resource`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $resource\n * @requires $http\n *\n * @description\n * A factory which creates a resource object that lets you interact with\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n *\n * The returned resource object has action methods which provide high-level behaviors without\n * the need to interact with the low level {@link ng.$http $http} service.\n *\n * Requires the {@link ngResource `ngResource`} module to be installed.\n *\n * @param {string} url A parametrized URL template with parameters prefixed by `:` as in\n *   `/user/:username`. If you are using a URL with a port number (e.g.\n *   `http://example.com:8080/api`), it will be respected.\n *\n *   If you are using a url with a suffix, just add the suffix, like this:\n *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\n *   or even `$resource('http://example.com/resource/:resource_id.:format')`\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n *   can escape it with `/\\.`.\n *\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n *   `actions` methods. If any of the parameter value is a function, it will be executed every time\n *   when a param value needs to be obtained for a request (unless the param was overridden).\n *\n *   Each key value in the parameter object is first bound to url template if present and then any\n *   excess keys are appended to the url search query after the `?`.\n *\n *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\n *   URL `/path/greet?salutation=Hello`.\n *\n *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted\n *   from the corresponding property on the `data` object (provided when calling an action method).  For\n *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`\n *   will be `data.someProp`.\n *\n * @param {Object.<Object>=} actions Hash with declaration of custom action that should extend\n *   the default set of resource actions. The declaration should be created in the format of {@link\n *   ng.$http#usage_parameters $http.config}:\n *\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\n *        ...}\n *\n *   Where:\n *\n *   - **`action`** – {string} – The name of action. This name becomes the name of the method on\n *     your resource object.\n *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n *     `DELETE`, `JSONP`, etc).\n *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\n *     the parameter value is a function, it will be executed every time when a param value needs to\n *     be obtained for a request (unless the param was overridden).\n *   - **`url`** – {string} – action specific `url` override. The url templating is supported just\n *     like for the resource-level urls.\n *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\n *     see `returns` section.\n *   - **`transformRequest`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     request body and headers and returns its transformed (typically serialized) version.\n *     By default, transformRequest will contain one function that checks if the request data is\n *     an object and serializes to using `angular.toJson`. To prevent this behavior, set\n *     `transformRequest` to an empty array: `transformRequest: []`\n *   - **`transformResponse`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     response body and headers and returns its transformed (typically deserialized) version.\n *     By default, transformResponse will contain one function that checks if the response looks like\n *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set\n *     `transformResponse` to an empty array: `transformResponse: []`\n *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n *     GET request, otherwise if a cache instance built with\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n *     caching.\n *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that\n *     should abort the request when resolved.\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n *     XHR object. See\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\n *     for more information.\n *   - **`responseType`** - `{string}` - see\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\n *     with `http response` object. See {@link ng.$http $http interceptors}.\n *\n * @returns {Object} A resource \"class\" object with methods for the default set of resource actions\n *   optionally extended with custom `actions`. The default set contains these actions:\n *   ```js\n *   { 'get':    {method:'GET'},\n *     'save':   {method:'POST'},\n *     'query':  {method:'GET', isArray:true},\n *     'remove': {method:'DELETE'},\n *     'delete': {method:'DELETE'} };\n *   ```\n *\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\n *   destination and parameters. When the data is returned from the server then the object is an\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n *   read, update, delete) on server-side data like this:\n *   ```js\n *   var User = $resource('/user/:userId', {userId:'@id'});\n *   var user = User.get({userId:123}, function() {\n *     user.abc = true;\n *     user.$save();\n *   });\n *   ```\n *\n *   It is important to realize that invoking a $resource object method immediately returns an\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\n *   server the existing reference is populated with the actual data. This is a useful trick since\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\n *   object results in no rendering, once the data arrives from the server then the object is\n *   populated with the data and the view automatically re-renders itself showing the new data. This\n *   means that in most cases one never has to write a callback function for the action methods.\n *\n *   The action methods on the class object or instance object can be invoked with the following\n *   parameters:\n *\n *   - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n *   - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n *\n *   Success callback is called with (value, responseHeaders) arguments. Error callback is called\n *   with (httpResponse) argument.\n *\n *   Class actions return empty instance (with additional properties below).\n *   Instance actions return promise of the action.\n *\n *   The Resource instances and collection have these additional properties:\n *\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n *     instance or collection.\n *\n *     On success, the promise is resolved with the same resource instance or collection object,\n *     updated with data from server. This makes it easy to use in\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n *     rendering until the resource(s) are loaded.\n *\n *     On failure, the promise is resolved with the {@link ng.$http http response} object, without\n *     the `resource` property.\n *\n *     If an interceptor object was provided, the promise will instead be resolved with the value\n *     returned by the interceptor.\n *\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n *      data-binding.\n *\n * @example\n *\n * # Credit card resource\n *\n * ```js\n     // Define CreditCard class\n     var CreditCard = $resource('/user/:userId/card/:cardId',\n      {userId:123, cardId:'@id'}, {\n       charge: {method:'POST', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = \"J. Smith\";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:'0123'});\n     newCard.name = \"Mike Smith\";\n     newCard.$save();\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\n     expect(newCard.id).toEqual(789);\n * ```\n *\n * The object returned from this function execution is a resource \"class\" which has \"static\" method\n * for each action in the definition.\n *\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n * `headers`.\n * When the data is returned from the server then the object is an instance of the resource type and\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\n * operations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n *\n * It's worth noting that the success callback for `get`, `query` and other methods gets passed\n * in the response that came from the server as well as $http header getter function, so one\n * could rewrite the above example and get access to http headers as:\n *\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(u, getResponseHeaders){\n       u.abc = true;\n       u.$save(function(u, putResponseHeaders) {\n         //u => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n *\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\n *\n   ```\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n\n * # Creating a custom 'PUT' request\n * In this example we create a custom method on our resource to make a PUT request\n * ```js\n *    var app = angular.module('app', ['ngResource', 'ngRoute']);\n *\n *    // Some APIs expect a PUT request in the format URL/object/ID\n *    // Here we are creating an 'update' method\n *    app.factory('Notes', ['$resource', function($resource) {\n *    return $resource('/notes/:id', null,\n *        {\n *            'update': { method:'PUT' }\n *        });\n *    }]);\n *\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\n *    // We pass in $routeParams and our Notes factory along with $scope\n *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                      function($scope, $routeParams, Notes) {\n *    // First get a note object from the factory\n *    var note = Notes.get({ id:$routeParams.id });\n *    $id = note.id;\n *\n *    // Now call update passing in the ID first then the object you are updating\n *    Notes.update({ id:$id }, note);\n *\n *    // This will PUT /notes/ID with the note object in the request payload\n *    }]);\n * ```\n */\nangular.module('ngResource', ['ng']).\n  factory('$resource', ['$http', '$q', function($http, $q) {\n\n    var DEFAULT_ACTIONS = {\n      'get':    {method:'GET'},\n      'save':   {method:'POST'},\n      'query':  {method:'GET', isArray:true},\n      'remove': {method:'DELETE'},\n      'delete': {method:'DELETE'}\n    };\n    var noop = angular.noop,\n        forEach = angular.forEach,\n        extend = angular.extend,\n        copy = angular.copy,\n        isFunction = angular.isFunction;\n\n    /**\n     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n     * segments:\n     *    segment       = *pchar\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     */\n    function encodeUriSegment(val) {\n      return encodeUriQuery(val, true).\n        replace(/%26/gi, '&').\n        replace(/%3D/gi, '=').\n        replace(/%2B/gi, '+');\n    }\n\n\n    /**\n     * This method is intended for encoding *key* or *value* parts of query component. We need a\n     * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n     * have to be encoded per http://tools.ietf.org/html/rfc3986:\n     *    query       = *( pchar / \"/\" / \"?\" )\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     */\n    function encodeUriQuery(val, pctEncodeSpaces) {\n      return encodeURIComponent(val).\n        replace(/%40/gi, '@').\n        replace(/%3A/gi, ':').\n        replace(/%24/g, '$').\n        replace(/%2C/gi, ',').\n        replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    }\n\n    function Route(template, defaults) {\n      this.template = template;\n      this.defaults = defaults || {};\n      this.urlParams = {};\n    }\n\n    Route.prototype = {\n      setUrlParams: function(config, params, actionUrl) {\n        var self = this,\n            url = actionUrl || self.template,\n            val,\n            encodedVal;\n\n        var urlParams = self.urlParams = {};\n        forEach(url.split(/\\W/), function(param){\n          if (param === 'hasOwnProperty') {\n            throw $resourceMinErr('badname', \"hasOwnProperty is not a valid parameter name.\");\n          }\n          if (!(new RegExp(\"^\\\\d+$\").test(param)) && param &&\n               (new RegExp(\"(^|[^\\\\\\\\]):\" + param + \"(\\\\W|$)\").test(url))) {\n            urlParams[param] = true;\n          }\n        });\n        url = url.replace(/\\\\:/g, ':');\n\n        params = params || {};\n        forEach(self.urlParams, function(_, urlParam){\n          val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];\n          if (angular.isDefined(val) && val !== null) {\n            encodedVal = encodeUriSegment(val);\n            url = url.replace(new RegExp(\":\" + urlParam + \"(\\\\W|$)\", \"g\"), function(match, p1) {\n              return encodedVal + p1;\n            });\n          } else {\n            url = url.replace(new RegExp(\"(\\/?):\" + urlParam + \"(\\\\W|$)\", \"g\"), function(match,\n                leadingSlashes, tail) {\n              if (tail.charAt(0) == '/') {\n                return tail;\n              } else {\n                return leadingSlashes + tail;\n              }\n            });\n          }\n        });\n\n        // strip trailing slashes and set the url\n        url = url.replace(/\\/+$/, '') || '/';\n        // then replace collapse `/.` if found in the last URL path segment before the query\n        // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n        url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\n        // replace escaped `/\\.` with `/.`\n        config.url = url.replace(/\\/\\\\\\./, '/.');\n\n\n        // set params - delegate param encoding to $http\n        forEach(params, function(value, key){\n          if (!self.urlParams[key]) {\n            config.params = config.params || {};\n            config.params[key] = value;\n          }\n        });\n      }\n    };\n\n\n    function resourceFactory(url, paramDefaults, actions) {\n      var route = new Route(url);\n\n      actions = extend({}, DEFAULT_ACTIONS, actions);\n\n      function extractParams(data, actionParams){\n        var ids = {};\n        actionParams = extend({}, paramDefaults, actionParams);\n        forEach(actionParams, function(value, key){\n          if (isFunction(value)) { value = value(); }\n          ids[key] = value && value.charAt && value.charAt(0) == '@' ?\n            lookupDottedPath(data, value.substr(1)) : value;\n        });\n        return ids;\n      }\n\n      function defaultResponseInterceptor(response) {\n        return response.resource;\n      }\n\n      function Resource(value){\n        shallowClearAndCopy(value || {}, this);\n      }\n\n      forEach(actions, function(action, name) {\n        var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);\n\n        Resource[name] = function(a1, a2, a3, a4) {\n          var params = {}, data, success, error;\n\n          /* jshint -W086 */ /* (purposefully fall through case statements) */\n          switch(arguments.length) {\n          case 4:\n            error = a4;\n            success = a3;\n            //fallthrough\n          case 3:\n          case 2:\n            if (isFunction(a2)) {\n              if (isFunction(a1)) {\n                success = a1;\n                error = a2;\n                break;\n              }\n\n              success = a2;\n              error = a3;\n              //fallthrough\n            } else {\n              params = a1;\n              data = a2;\n              success = a3;\n              break;\n            }\n          case 1:\n            if (isFunction(a1)) success = a1;\n            else if (hasBody) data = a1;\n            else params = a1;\n            break;\n          case 0: break;\n          default:\n            throw $resourceMinErr('badargs',\n              \"Expected up to 4 arguments [params, data, success, error], got {0} arguments\",\n              arguments.length);\n          }\n          /* jshint +W086 */ /* (purposefully fall through case statements) */\n\n          var isInstanceCall = this instanceof Resource;\n          var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\n          var httpConfig = {};\n          var responseInterceptor = action.interceptor && action.interceptor.response ||\n                                    defaultResponseInterceptor;\n          var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||\n                                    undefined;\n\n          forEach(action, function(value, key) {\n            if (key != 'params' && key != 'isArray' && key != 'interceptor') {\n              httpConfig[key] = copy(value);\n            }\n          });\n\n          if (hasBody) httpConfig.data = data;\n          route.setUrlParams(httpConfig,\n                             extend({}, extractParams(data, action.params || {}), params),\n                             action.url);\n\n          var promise = $http(httpConfig).then(function (response) {\n            var data = response.data,\n              promise = value.$promise;\n\n            if (data) {\n              // Need to convert action.isArray to boolean in case it is undefined\n              // jshint -W018\n              if (angular.isArray(data) !== (!!action.isArray)) {\n                throw $resourceMinErr('badcfg',\n                    'Error in resource configuration. Expected ' +\n                    'response to contain an {0} but got an {1}',\n                  action.isArray ? 'array' : 'object',\n                  angular.isArray(data) ? 'array' : 'object');\n              }\n              // jshint +W018\n              if (action.isArray) {\n                value.length = 0;\n                forEach(data, function (item) {\n                  if (typeof item === \"object\") {\n                    value.push(new Resource(item));\n                  } else {\n                    // Valid JSON values may be string literals, and these should not be converted\n                    // into objects. These items will not have access to the Resource prototype\n                    // methods, but unfortunately there\n                    value.push(item);\n                  }\n                });\n              } else {\n                shallowClearAndCopy(data, value);\n                value.$promise = promise;\n              }\n            }\n\n            value.$resolved = true;\n\n            response.resource = value;\n\n            return response;\n          }, function(response) {\n            value.$resolved = true;\n\n            (error||noop)(response);\n\n            return $q.reject(response);\n          });\n\n          promise = promise.then(\n              function(response) {\n                var value = responseInterceptor(response);\n                (success||noop)(value, response.headers);\n                return value;\n              },\n              responseErrorInterceptor);\n\n          if (!isInstanceCall) {\n            // we are creating instance / collection\n            // - set the initial promise\n            // - return the instance / collection\n            value.$promise = promise;\n            value.$resolved = false;\n\n            return value;\n          }\n\n          // instance call\n          return promise;\n        };\n\n\n        Resource.prototype['$' + name] = function(params, success, error) {\n          if (isFunction(params)) {\n            error = success; success = params; params = {};\n          }\n          var result = Resource[name].call(this, params, this, success, error);\n          return result.$promise || result;\n        };\n      });\n\n      Resource.bind = function(additionalParamDefaults){\n        return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);\n      };\n\n      return Resource;\n    }\n\n    return resourceFactory;\n  }]);\n\n\n})(window, window.angular);\n"]}