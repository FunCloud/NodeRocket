{"version":3,"sources":["storage-cookie.js"],"names":[],"mappings":"AAAA,QAAQ,MAAR,CAAe,wBAAf;;;;;;;;;;;;AAAA,CAYC,OAZD,CAYS,yBAZT,EAYoC,CAAC,cAAD,EAAiB,UAAU,YAAV,EAAwB;;AAE3E,MAAI,0BAA0B;;;;;;;;;;;;;AAa5B,SAAK,UAAU,IAAV,EAAgB;AACnB,aAAO,aAAa,GAAb,CAAiB,IAAjB,CAAP;AACD,KAf2B;;;;;;;;;;;;;AA4B5B,SAAK,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AAC1B,mBAAa,GAAb,CAAiB,IAAjB,EAAuB,KAAvB;AACD;AA9B2B,GAA9B;;AAiCA,SAAO,uBAAP;AACD,CApCmC,CAZpC","file":"storage-cookie-compiled.js","sourcesContent":["angular.module('pascalprecht.translate')\n\n/**\n * @ngdoc object\n * @name pascalprecht.translate.$translateCookieStorage\n * @requires $cookieStore\n *\n * @description\n * Abstraction layer for cookieStore. This service is used when telling angular-translate\n * to use cookieStore as storage.\n *\n */\n.factory('$translateCookieStorage', ['$cookieStore', function ($cookieStore) {\n\n  var $translateCookieStorage = {\n\n    /**\n     * @ngdoc function\n     * @name pascalprecht.translate.$translateCookieStorage#get\n     * @methodOf pascalprecht.translate.$translateCookieStorage\n     *\n     * @description\n     * Returns an item from cookieStorage by given name.\n     *\n     * @param {string} name Item name\n     * @return {string} Value of item name\n     */\n    get: function (name) {\n      return $cookieStore.get(name);\n    },\n\n    /**\n     * @ngdoc function\n     * @name pascalprecht.translate.$translateCookieStorage#set\n     * @methodOf pascalprecht.translate.$translateCookieStorage\n     *\n     * @description\n     * Sets an item in cookieStorage by given name.\n     *\n     * @param {string} name Item name\n     * @param {string} value Item value\n     */\n    set: function (name, value) {\n      $cookieStore.put(name, value);\n    }\n  };\n\n  return $translateCookieStorage;\n}]);\n"]}