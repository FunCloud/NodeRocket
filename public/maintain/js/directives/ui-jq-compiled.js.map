{"version":3,"sources":["ui-jq.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA,QAAQ,MAAR,CAAe,OAAf,EAAwB,CAAC,SAAD,CAAxB,EACE,KADF,CACQ,YADR,EACsB,EADtB,EAEE,SAFF,CAEY,MAFZ,EAEoB,CAAC,YAAD,EAAe,WAAf,EAA4B,QAA5B,EAAsC,UAAtC,EAAkD,SAAS,qBAAT,CAA+B,UAA/B,EAA2C,SAA3C,EAAsD,MAAtD,EAA8D,QAA9D,EAAwE;;AAE5I,SAAO;AACL,cAAU,GADL;AAEL,aAAS,SAAS,qBAAT,CAA+B,IAA/B,EAAqC,MAArC,EAA6C;;AAEpD,UAAI,CAAC,QAAQ,UAAR,CAAmB,KAAK,OAAO,IAAZ,CAAnB,CAAD,IAA0C,CAAC,UAAU,OAAO,IAAjB,CAA/C,EAAuE;AACrE,cAAM,IAAI,KAAJ,CAAU,iBAAiB,OAAO,IAAxB,GAA+B,2BAAzC,CAAN;AACD;AACD,UAAI,UAAU,cAAc,WAAW,OAAO,IAAlB,CAA5B;;AAEA,aAAO,SAAS,mBAAT,CAA6B,KAA7B,EAAoC,GAApC,EAAyC,KAAzC,EAAgD;;AAErD,iBAAS,UAAT,GAAqB;AACnB,cAAI,cAAc,EAAlB;;;AAGA,cAAI,MAAM,SAAV,EAAqB;AACnB,0BAAc,MAAM,KAAN,CAAY,MAAM,MAAM,SAAZ,GAAwB,GAApC,CAAd;AACA,gBAAI,QAAQ,QAAR,CAAiB,OAAjB,KAA6B,QAAQ,QAAR,CAAiB,YAAY,CAAZ,CAAjB,CAAjC,EAAmE;AACjE,0BAAY,CAAZ,IAAiB,QAAQ,MAAR,CAAe,EAAf,EAAmB,OAAnB,EAA4B,YAAY,CAAZ,CAA5B,CAAjB;AACD;AACF,WALD,MAKO,IAAI,OAAJ,EAAa;AAClB,0BAAc,CAAC,OAAD,CAAd;AACD;AACD,iBAAO,WAAP;AACD;;;AAGD,YAAI,MAAM,OAAN,IAAiB,IAAI,EAAJ,CAAO,uBAAP,CAArB,EAAsD;AACpD,cAAI,IAAJ,CAAS,QAAT,EAAmB,YAAW;AAC5B,gBAAI,OAAJ,CAAY,OAAZ;AACD,WAFD;AAGD;;;AAGD,iBAAS,UAAT,GAAsB;AACpB,mBAAS,YAAW;AAClB,gBAAI,MAAM,IAAV,EAAgB,KAAhB,CAAsB,GAAtB,EAA2B,YAA3B;AACD,WAFD,EAEG,CAFH,EAEM,KAFN;AAGD;;AAED,iBAAS,OAAT,GAAkB;;AAEhB,cAAI,MAAM,SAAV,EAAqB;AACnB,kBAAM,MAAN,CAAa,MAAM,SAAnB,EAA8B,YAAW;AACvC;AACD,aAFD;AAGD;AACF;;AAED,YAAK,UAAU,MAAM,IAAhB,CAAL,EAA6B;AAC3B,iBAAO,IAAP,CAAY,UAAU,MAAM,IAAhB,CAAZ,EAAmC,IAAnC,CAAwC,YAAW;AACjD;AACA;AACD,WAHD,EAGG,KAHH,CAGS,YAAW,CAEnB,CALD;AAMD,SAPD,MAOO;AACL;AACA;AACD;AACF,OAnDD;AAoDD;AA7DI,GAAP;AA+DD,CAjEmB,CAFpB","file":"ui-jq-compiled.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * 0.1.1\r\n * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.\r\n *\r\n * It is possible to specify a default set of parameters for each jQuery plugin.\r\n * Under the jq key, namespace each plugin by that which will be passed to ui-jq.\r\n * Unfortunately, at this time you can only pre-define the first parameter.\r\n * @example { jq : { datepicker : { showOn:'click' } } }\r\n *\r\n * @param ui-jq {string} The $elm.[pluginName]() to call.\r\n * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function\r\n *     Multiple parameters can be separated by commas\r\n * @param [ui-refresh] {expression} Watch expression and refire plugin on changes\r\n *\r\n * @example <input ui-jq=\"datepicker\" ui-options=\"{showOn:'click'},secondParameter,thirdParameter\" ui-refresh=\"iChange\">\r\n */\r\nangular.module('ui.jq', ['ui.load']).\r\n  value('uiJqConfig', {}).\r\n  directive('uiJq', ['uiJqConfig', 'JQ_CONFIG', 'uiLoad', '$timeout', function uiJqInjectingFunction(uiJqConfig, JQ_CONFIG, uiLoad, $timeout) {\r\n\r\n  return {\r\n    restrict: 'A',\r\n    compile: function uiJqCompilingFunction(tElm, tAttrs) {\r\n\r\n      if (!angular.isFunction(tElm[tAttrs.uiJq]) && !JQ_CONFIG[tAttrs.uiJq]) {\r\n        throw new Error('ui-jq: The \"' + tAttrs.uiJq + '\" function does not exist');\r\n      }\r\n      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];\r\n\r\n      return function uiJqLinkingFunction(scope, elm, attrs) {\r\n\r\n        function getOptions(){\r\n          var linkOptions = [];\r\n\r\n          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method\r\n          if (attrs.uiOptions) {\r\n            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');\r\n            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {\r\n              linkOptions[0] = angular.extend({}, options, linkOptions[0]);\r\n            }\r\n          } else if (options) {\r\n            linkOptions = [options];\r\n          }\r\n          return linkOptions;\r\n        }\r\n\r\n        // If change compatibility is enabled, the form input's \"change\" event will trigger an \"input\" event\r\n        if (attrs.ngModel && elm.is('select,input,textarea')) {\r\n          elm.bind('change', function() {\r\n            elm.trigger('input');\r\n          });\r\n        }\r\n\r\n        // Call jQuery method and pass relevant options\r\n        function callPlugin() {\r\n          $timeout(function() {\r\n            elm[attrs.uiJq].apply(elm, getOptions());\r\n          }, 0, false);\r\n        }\r\n\r\n        function refresh(){\r\n          // If ui-refresh is used, re-fire the the method upon every change\r\n          if (attrs.uiRefresh) {\r\n            scope.$watch(attrs.uiRefresh, function() {\r\n              callPlugin();\r\n            });\r\n          }\r\n        }\r\n\r\n        if ( JQ_CONFIG[attrs.uiJq] ) {\r\n          uiLoad.load(JQ_CONFIG[attrs.uiJq]).then(function() {\r\n            callPlugin();\r\n            refresh();\r\n          }).catch(function() {\r\n            \r\n          });\r\n        } else {\r\n          callPlugin();\r\n          refresh();\r\n        }\r\n      };\r\n    }\r\n  };\r\n}]);"]}