{"version":3,"sources":["ui-validate.js"],"names":[],"mappings":"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","file":"ui-validate-compiled.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * General-purpose validator for ngModel.\r\n * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using\r\n * an arbitrary validation function requires creation of a custom formatters and / or parsers.\r\n * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).\r\n * A validator function will trigger validation on both model and input changes.\r\n *\r\n * @example <input ui-validate=\" 'myValidatorFunction($value)' \">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel' }\" ui-validate-watch=\" 'anotherModel' \">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\" ui-validate-watch=\" { foo : 'anotherModel' } \">\r\n *\r\n * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.\r\n * If an object literal is passed a key denotes a validation error key while a value should be a validator function.\r\n * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.\r\n */\r\nangular.module('ui.validate',[]).directive('uiValidate', function () {\r\n\r\n  return {\r\n    restrict: 'A',\r\n    require: 'ngModel',\r\n    link: function (scope, elm, attrs, ctrl) {\r\n      var validateFn, validators = {},\r\n          validateExpr = scope.$eval(attrs.uiValidate);\r\n\r\n      if (!validateExpr){ return;}\r\n\r\n      if (angular.isString(validateExpr)) {\r\n        validateExpr = { validator: validateExpr };\r\n      }\r\n\r\n      angular.forEach(validateExpr, function (exprssn, key) {\r\n        validateFn = function (valueToValidate) {\r\n          var expression = scope.$eval(exprssn, { '$value' : valueToValidate });\r\n          if (angular.isObject(expression) && angular.isFunction(expression.then)) {\r\n            // expression is a promise\r\n            expression.then(function(){\r\n              ctrl.$setValidity(key, true);\r\n            }, function(){\r\n              ctrl.$setValidity(key, false);\r\n            });\r\n            return valueToValidate;\r\n          } else if (expression) {\r\n            // expression is true\r\n            ctrl.$setValidity(key, true);\r\n            return valueToValidate;\r\n          } else {\r\n            // expression is false\r\n            ctrl.$setValidity(key, false);\r\n            return valueToValidate;\r\n          }\r\n        };\r\n        validators[key] = validateFn;\r\n        ctrl.$formatters.push(validateFn);\r\n        ctrl.$parsers.push(validateFn);\r\n      });\r\n\r\n      function apply_watch(watch)\r\n      {\r\n          //string - update all validators on expression change\r\n          if (angular.isString(watch))\r\n          {\r\n              scope.$watch(watch, function(){\r\n                  angular.forEach(validators, function(validatorFn){\r\n                      validatorFn(ctrl.$modelValue);\r\n                  });\r\n              });\r\n              return;\r\n          }\r\n\r\n          //array - update all validators on change of any expression\r\n          if (angular.isArray(watch))\r\n          {\r\n              angular.forEach(watch, function(expression){\r\n                  scope.$watch(expression, function()\r\n                  {\r\n                      angular.forEach(validators, function(validatorFn){\r\n                          validatorFn(ctrl.$modelValue);\r\n                      });\r\n                  });\r\n              });\r\n              return;\r\n          }\r\n\r\n          //object - update appropriate validator\r\n          if (angular.isObject(watch))\r\n          {\r\n              angular.forEach(watch, function(expression, validatorKey)\r\n              {\r\n                  //value is string - look after one expression\r\n                  if (angular.isString(expression))\r\n                  {\r\n                      scope.$watch(expression, function(){\r\n                          validators[validatorKey](ctrl.$modelValue);\r\n                      });\r\n                  }\r\n\r\n                  //value is array - look after all expressions in array\r\n                  if (angular.isArray(expression))\r\n                  {\r\n                      angular.forEach(expression, function(intExpression)\r\n                      {\r\n                          scope.$watch(intExpression, function(){\r\n                              validators[validatorKey](ctrl.$modelValue);\r\n                          });\r\n                      });\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      // Support for ui-validate-watch\r\n      if (attrs.uiValidateWatch){\r\n          apply_watch( scope.$eval(attrs.uiValidateWatch) );\r\n      }\r\n    }\r\n  };\r\n});\r\n"]}