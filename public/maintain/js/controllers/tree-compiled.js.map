{"version":3,"sources":["tree.js"],"names":[],"mappings":"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","file":"tree-compiled.js","sourcesContent":["app.controller('AbnTestController', function($scope, $timeout) {\r\n    var apple_selected, tree, treedata_avm, treedata_geography;\r\n    $scope.my_tree_handler = function(branch) {\r\n      var _ref;\r\n      $scope.output = \"You selected: \" + branch.label;\r\n      if ((_ref = branch.data) != null ? _ref.description : void 0) {\r\n        return $scope.output += '(' + branch.data.description + ')';\r\n      }\r\n    };\r\n    apple_selected = function(branch) {\r\n      return $scope.output = \"APPLE! : \" + branch.label;\r\n      return $scope.output = \"APPLE! : \" + branch.label;\r\n    };\r\n    treedata_avm = [\r\n      {\r\n        label: 'Animal',\r\n        children: [\r\n          {\r\n            label: 'Dog',\r\n            data: {\r\n              description: \"man's best friend\"\r\n            }\r\n          }, {\r\n            label: 'Cat',\r\n            data: {\r\n              description: \"Felis catus\"\r\n            }\r\n          }, {\r\n            label: 'Hippopotamus',\r\n            data: {\r\n              description: \"hungry, hungry\"\r\n            }\r\n          }, {\r\n            label: 'Chicken',\r\n            children: ['White Leghorn', 'Rhode Island Red', 'Jersey Giant']\r\n          }\r\n        ]\r\n      }, {\r\n        label: 'Vegetable',\r\n        data: {\r\n          definition: \"A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.\",\r\n          data_can_contain_anything: true\r\n        },\r\n        onSelect: function(branch) {\r\n          return $scope.output = \"Vegetable: \" + branch.data.definition;\r\n        },\r\n        children: [\r\n          {\r\n            label: 'Oranges'\r\n          }, {\r\n            label: 'Apples',\r\n            children: [\r\n              {\r\n                label: 'Granny Smith',\r\n                onSelect: apple_selected\r\n              }, {\r\n                label: 'Red Delicous',\r\n                onSelect: apple_selected\r\n              }, {\r\n                label: 'Fuji',\r\n                onSelect: apple_selected\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }, {\r\n        label: 'Mineral',\r\n        children: [\r\n          {\r\n            label: 'Rock',\r\n            children: ['Igneous', 'Sedimentary', 'Metamorphic']\r\n          }, {\r\n            label: 'Metal',\r\n            children: ['Aluminum', 'Steel', 'Copper']\r\n          }, {\r\n            label: 'Plastic',\r\n            children: [\r\n              {\r\n                label: 'Thermoplastic',\r\n                children: ['polyethylene', 'polypropylene', 'polystyrene', ' polyvinyl chloride']\r\n              }, {\r\n                label: 'Thermosetting Polymer',\r\n                children: ['polyester', 'polyurethane', 'vulcanized rubber', 'bakelite', 'urea-formaldehyde']\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n    treedata_geography = [\r\n      {\r\n        label: 'North America',\r\n        children: [\r\n          {\r\n            label: 'Canada',\r\n            children: ['Toronto', 'Vancouver']\r\n          }, {\r\n            label: 'USA',\r\n            children: ['New York', 'Los Angeles']\r\n          }, {\r\n            label: 'Mexico',\r\n            children: ['Mexico City', 'Guadalajara']\r\n          }\r\n        ]\r\n      }, {\r\n        label: 'South America',\r\n        children: [\r\n          {\r\n            label: 'Venezuela',\r\n            children: ['Caracas', 'Maracaibo']\r\n          }, {\r\n            label: 'Brazil',\r\n            children: ['Sao Paulo', 'Rio de Janeiro']\r\n          }, {\r\n            label: 'Argentina',\r\n            children: ['Buenos Aires', 'Cordoba']\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n    $scope.my_data = treedata_avm;\r\n    $scope.try_changing_the_tree_data = function() {\r\n      if ($scope.my_data === treedata_avm) {\r\n        return $scope.my_data = treedata_geography;\r\n      } else {\r\n        return $scope.my_data = treedata_avm;\r\n      }\r\n    };\r\n    $scope.my_tree = tree = {};\r\n    $scope.try_async_load = function() {\r\n      $scope.my_data = [];\r\n      $scope.doing_async = true;\r\n      return $timeout(function() {\r\n        if (Math.random() < 0.5) {\r\n          $scope.my_data = treedata_avm;\r\n        } else {\r\n          $scope.my_data = treedata_geography;\r\n        }\r\n        $scope.doing_async = false;\r\n        return tree.expand_all();\r\n      }, 1000);\r\n    };\r\n    return $scope.try_adding_a_branch = function() {\r\n      var b;\r\n      b = tree.get_selected_branch();\r\n      return tree.add_branch(b, {\r\n        label: 'New Branch',\r\n        data: {\r\n          something: 42,\r\n          \"else\": 43\r\n        }\r\n      });\r\n    };\r\n});"]}