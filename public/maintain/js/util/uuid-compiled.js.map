{"version":3,"sources":["uuid.js"],"names":[],"mappings":";AACA,SAAS,IAAT,GAAe;AACX,OAAK,EAAL,GAAU,KAAK,UAAL,EAAV;AACH;;;AAKD,KAAK,SAAL,CAAe,OAAf,GAAyB,YAAU;AAAE,SAAO,KAAK,EAAZ;AAAiB,CAAtD;AACA,KAAK,SAAL,CAAe,QAAf,GAA0B,YAAU;AAAE,SAAO,KAAK,EAAZ;AAAiB,CAAvD;;;;;AAOA,KAAK,SAAL,CAAe,UAAf,GAA4B,YAAU;;;;;;AAMlC,MAAI,KAAK,IAAI,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,CAAT;AACA,MAAI,KAAK,IAAI,IAAJ,EAAT;AACA,MAAI,IAAI,GAAG,OAAH,KAAe,GAAG,OAAH,EAAvB;AACA,MAAI,KAAK,KAAK,cAAL,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,EAAxB,CAAT;AACA,MAAI,KAAK,KAAK,cAAL,CAAoB,CAApB,EAAsB,EAAtB,EAAyB,EAAzB,CAAT;AACA,MAAI,MAAM,KAAK,cAAL,CAAoB,CAApB,EAAsB,EAAtB,EAAyB,EAAzB,IAA+B,GAAzC,C;AACA,MAAI,OAAO,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,CAAtC,CAAX;AACA,MAAI,MAAM,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,CAAtC,CAAV;;;;;;AAMA,MAAI,IAAI,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,CAAtC,IACA,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,EAAtC,CADA,GAEA,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,CAAtC,CAFA,GAGA,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,EAAtC,CAHA,GAIA,KAAK,cAAL,CAAoB,KAAK,IAAL,CAAU,IAAV,CAApB,EAAoC,CAApC,EAAsC,EAAtC,CAJR,C;AAKA,SAAO,KAAK,EAAL,GAAW,GAAX,GAAkB,IAAlB,GAAyB,GAAzB,GAA+B,CAAtC;AACH,CAzBD;;;;;AAgCA,KAAK,cAAL,GAAsB,UAAS,GAAT,EAAa,KAAb,EAAmB,GAAnB,EAAuB;AAC5C,MAAI,SAAS,KAAK,UAAL,CAAgB,GAAhB,EAAoB,EAApB,CAAb;AACA,MAAI,YAAY,IAAI,KAAJ,EAAhB;AACA,MAAI,aAAa,EAAjB;AACA,MAAI,IAAI,CAAR;AACA,OAAI,IAAE,CAAN,EAAQ,IAAE,OAAO,MAAjB,EAAwB,GAAxB,EAA4B;AACxB,cAAU,IAAV,CAAe,OAAO,SAAP,CAAiB,CAAjB,EAAmB,IAAE,CAArB,CAAf;AACH;AACD,OAAI,IAAE,KAAK,KAAL,CAAW,QAAM,CAAjB,CAAN,EAA0B,KAAG,KAAK,KAAL,CAAW,MAAI,CAAf,CAA7B,EAA+C,GAA/C,EAAmD;AAC/C,QAAG,CAAC,UAAU,CAAV,CAAD,IAAiB,UAAU,CAAV,KAAgB,EAApC,EAAwC,cAAc,GAAd,CAAxC,KACK,cAAc,UAAU,CAAV,CAAd;AACR;AACD,SAAO,UAAP;AACA,CAbD;;;;AAmBA,KAAK,UAAL,GAAkB,UAAS,MAAT,EAAiB,IAAjB,EAAsB;AACvC,SAAQ,MAAD,CAAS,QAAT,CAAkB,IAAlB,EAAwB,WAAxB,EAAP;AACA,CAFD;;;;AAQA,KAAK,IAAL,GAAY,UAAS,GAAT,EAAa;AACxB,SAAO,KAAK,KAAL,CAAW,KAAK,MAAL,MAAiB,MAAM,CAAvB,CAAX,CAAP;AACA,CAFD","file":"uuid-compiled.js","sourcesContent":["// On creation of a UUID object, set it's initial value\r\nfunction UUID(){\r\n    this.id = this.createUUID();\r\n}\r\n\r\n \r\n\r\n// When asked what this Object is, lie and return it's value\r\nUUID.prototype.valueOf = function(){ return this.id; };\r\nUUID.prototype.toString = function(){ return this.id; };\r\n\r\n \r\n\r\n//\r\n// INSTANCE SPECIFIC METHODS\r\n//\r\nUUID.prototype.createUUID = function(){\r\n    //\r\n    // Loose interpretation of the specification DCE 1.1: Remote Procedure Call\r\n    // since JavaScript doesn't allow access to internal systems, the last 48 bits\r\n    // of the node section is made up using a series of random numbers (6 octets long).\r\n    // \r\n    var dg = new Date(1582, 10, 15, 0, 0, 0, 0);\r\n    var dc = new Date();\r\n    var t = dc.getTime() - dg.getTime();\r\n    var tl = UUID.getIntegerBits(t,0,31);\r\n    var tm = UUID.getIntegerBits(t,32,47);\r\n    var thv = UUID.getIntegerBits(t,48,59) + '1'; // version 1, security version is 2\r\n    var csar = UUID.getIntegerBits(UUID.rand(4095),0,7);\r\n    var csl = UUID.getIntegerBits(UUID.rand(4095),0,7);\r\n\r\n    // since detection of anything about the machine/browser is far to buggy,\r\n    // include some more random numbers here\r\n    // if NIC or an IP can be obtained reliably, that should be put in\r\n    // here instead.\r\n    var n = UUID.getIntegerBits(UUID.rand(8191),0,7) +\r\n            UUID.getIntegerBits(UUID.rand(8191),8,15) +\r\n            UUID.getIntegerBits(UUID.rand(8191),0,7) +\r\n            UUID.getIntegerBits(UUID.rand(8191),8,15) +\r\n            UUID.getIntegerBits(UUID.rand(8191),0,15); // this last number is two octets long\r\n    return tl + tm  + thv  + csar + csl + n;\r\n};\r\n\r\n \r\n\r\n//Pull out only certain bits from a very large integer, used to get the time\r\n//code information for the first part of a UUID. Will return zero's if there\r\n//aren't enough bits to shift where it needs to.\r\nUUID.getIntegerBits = function(val,start,end){\r\n var base16 = UUID.returnBase(val,16);\r\n var quadArray = new Array();\r\n var quadString = '';\r\n var i = 0;\r\n for(i=0;i<base16.length;i++){\r\n     quadArray.push(base16.substring(i,i+1));   \r\n }\r\n for(i=Math.floor(start/4);i<=Math.floor(end/4);i++){\r\n     if(!quadArray[i] || quadArray[i] == '') quadString += '0';\r\n     else quadString += quadArray[i];\r\n }\r\n return quadString;\r\n};\r\n\r\n \r\n\r\n//Replaced from the original function to leverage the built in methods in\r\n//JavaScript. Thanks to Robert Kieffer for pointing this one out\r\nUUID.returnBase = function(number, base){\r\n return (number).toString(base).toUpperCase();\r\n};\r\n\r\n \r\n\r\n//pick a random number within a range of numbers\r\n//int b rand(int a); where 0 <= b <= a\r\nUUID.rand = function(max){\r\n return Math.floor(Math.random() * (max + 1));\r\n};"]}